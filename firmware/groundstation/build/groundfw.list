
build/groundfw.elf:     file format elf32-littlearm


Disassembly of section .text:

080000c0 <Reset_Handler>:
 80000c0:	b672      	cpsid	i
 80000c2:	4822      	ldr	r0, [pc, #136]	; (800014c <endfiniloop+0x4>)
 80000c4:	f380 8809 	msr	PSP, r0
 80000c8:	2002      	movs	r0, #2
 80000ca:	f380 8814 	msr	CONTROL, r0
 80000ce:	f3bf 8f6f 	isb	sy
 80000d2:	f000 fee5 	bl	8000ea0 <__core_init>
 80000d6:	f000 fdfb 	bl	8000cd0 <__early_init>
 80000da:	481d      	ldr	r0, [pc, #116]	; (8000150 <endfiniloop+0x8>)
 80000dc:	491d      	ldr	r1, [pc, #116]	; (8000154 <endfiniloop+0xc>)
 80000de:	4a1e      	ldr	r2, [pc, #120]	; (8000158 <endfiniloop+0x10>)

080000e0 <msloop>:
 80000e0:	4291      	cmp	r1, r2
 80000e2:	da02      	bge.n	80000ea <endmsloop>
 80000e4:	6008      	str	r0, [r1, #0]
 80000e6:	3104      	adds	r1, #4
 80000e8:	e7fa      	b.n	80000e0 <msloop>

080000ea <endmsloop>:
 80000ea:	491c      	ldr	r1, [pc, #112]	; (800015c <endfiniloop+0x14>)
 80000ec:	4a17      	ldr	r2, [pc, #92]	; (800014c <endfiniloop+0x4>)

080000ee <psloop>:
 80000ee:	4291      	cmp	r1, r2
 80000f0:	da02      	bge.n	80000f8 <endpsloop>
 80000f2:	6008      	str	r0, [r1, #0]
 80000f4:	3104      	adds	r1, #4
 80000f6:	e7fa      	b.n	80000ee <psloop>

080000f8 <endpsloop>:
 80000f8:	4919      	ldr	r1, [pc, #100]	; (8000160 <endfiniloop+0x18>)
 80000fa:	4a1a      	ldr	r2, [pc, #104]	; (8000164 <endfiniloop+0x1c>)
 80000fc:	4b1a      	ldr	r3, [pc, #104]	; (8000168 <endfiniloop+0x20>)

080000fe <dloop>:
 80000fe:	429a      	cmp	r2, r3
 8000100:	da04      	bge.n	800010c <enddloop>
 8000102:	6808      	ldr	r0, [r1, #0]
 8000104:	6010      	str	r0, [r2, #0]
 8000106:	3104      	adds	r1, #4
 8000108:	3204      	adds	r2, #4
 800010a:	e7f8      	b.n	80000fe <dloop>

0800010c <enddloop>:
 800010c:	2000      	movs	r0, #0
 800010e:	4917      	ldr	r1, [pc, #92]	; (800016c <endfiniloop+0x24>)
 8000110:	4a17      	ldr	r2, [pc, #92]	; (8000170 <endfiniloop+0x28>)

08000112 <bloop>:
 8000112:	4291      	cmp	r1, r2
 8000114:	da02      	bge.n	800011c <endbloop>
 8000116:	6008      	str	r0, [r1, #0]
 8000118:	3104      	adds	r1, #4
 800011a:	e7fa      	b.n	8000112 <bloop>

0800011c <endbloop>:
 800011c:	f000 fe80 	bl	8000e20 <__init_ram_areas>
 8000120:	f000 feb6 	bl	8000e90 <__late_init>
 8000124:	4c13      	ldr	r4, [pc, #76]	; (8000174 <endfiniloop+0x2c>)
 8000126:	4d14      	ldr	r5, [pc, #80]	; (8000178 <endfiniloop+0x30>)

08000128 <initloop>:
 8000128:	42ac      	cmp	r4, r5
 800012a:	da03      	bge.n	8000134 <endinitloop>
 800012c:	6821      	ldr	r1, [r4, #0]
 800012e:	4788      	blx	r1
 8000130:	3404      	adds	r4, #4
 8000132:	e7f9      	b.n	8000128 <initloop>

08000134 <endinitloop>:
 8000134:	f000 fc1c 	bl	8000970 <main>
 8000138:	4c10      	ldr	r4, [pc, #64]	; (800017c <endfiniloop+0x34>)
 800013a:	4d11      	ldr	r5, [pc, #68]	; (8000180 <endfiniloop+0x38>)

0800013c <finiloop>:
 800013c:	42ac      	cmp	r4, r5
 800013e:	da03      	bge.n	8000148 <endfiniloop>
 8000140:	6821      	ldr	r1, [r4, #0]
 8000142:	4788      	blx	r1
 8000144:	3404      	adds	r4, #4
 8000146:	e7f9      	b.n	800013c <finiloop>

08000148 <endfiniloop>:
 8000148:	490e      	ldr	r1, [pc, #56]	; (8000184 <endfiniloop+0x3c>)
 800014a:	4708      	bx	r1
 800014c:	20000600 	.word	0x20000600
 8000150:	55555555 	.word	0x55555555
 8000154:	20000000 	.word	0x20000000
 8000158:	20000400 	.word	0x20000400
 800015c:	20000400 	.word	0x20000400
 8000160:	08000fa0 	.word	0x08000fa0
 8000164:	20000600 	.word	0x20000600
 8000168:	20000600 	.word	0x20000600
 800016c:	20000600 	.word	0x20000600
 8000170:	20000948 	.word	0x20000948
 8000174:	080000c0 	.word	0x080000c0
 8000178:	080000c0 	.word	0x080000c0
 800017c:	080000c0 	.word	0x080000c0
 8000180:	080000c0 	.word	0x080000c0
 8000184:	08000e81 	.word	0x08000e81
	...

08000190 <_port_switch>:
 8000190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000192:	4644      	mov	r4, r8
 8000194:	464d      	mov	r5, r9
 8000196:	4656      	mov	r6, sl
 8000198:	465f      	mov	r7, fp
 800019a:	b4f0      	push	{r4, r5, r6, r7}
 800019c:	466b      	mov	r3, sp
 800019e:	60cb      	str	r3, [r1, #12]
 80001a0:	68c3      	ldr	r3, [r0, #12]
 80001a2:	469d      	mov	sp, r3
 80001a4:	bcf0      	pop	{r4, r5, r6, r7}
 80001a6:	46a0      	mov	r8, r4
 80001a8:	46a9      	mov	r9, r5
 80001aa:	46b2      	mov	sl, r6
 80001ac:	46bb      	mov	fp, r7
 80001ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080001b0 <_port_thread_start>:
 80001b0:	b662      	cpsie	i
 80001b2:	1c28      	adds	r0, r5, #0
 80001b4:	47a0      	blx	r4
 80001b6:	2000      	movs	r0, #0
 80001b8:	f000 fdf2 	bl	8000da0 <chThdExit>

080001bc <_port_switch_from_isr>:
 80001bc:	f000 fe10 	bl	8000de0 <chSchDoReschedule>

080001c0 <_port_exit_from_isr>:
 80001c0:	4a01      	ldr	r2, [pc, #4]	; (80001c8 <_port_exit_from_isr+0x8>)
 80001c2:	4b02      	ldr	r3, [pc, #8]	; (80001cc <_port_exit_from_isr+0xc>)
 80001c4:	6013      	str	r3, [r2, #0]
 80001c6:	e7fe      	b.n	80001c6 <_port_exit_from_isr+0x6>
 80001c8:	e000ed04 	.word	0xe000ed04
 80001cc:	80000000 	.word	0x80000000

080001d0 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 80001d0:	e7fe      	b.n	80001d0 <_idle_thread>
 80001d2:	46c0      	nop			; (mov r8, r8)
	...

080001e0 <chCoreAlloc>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001e0:	b672      	cpsid	i
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 80001e2:	2207      	movs	r2, #7
 80001e4:	1dc3      	adds	r3, r0, #7
 80001e6:	4393      	bics	r3, r2
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 80001e8:	4906      	ldr	r1, [pc, #24]	; (8000204 <chCoreAlloc+0x24>)
 80001ea:	4a07      	ldr	r2, [pc, #28]	; (8000208 <chCoreAlloc+0x28>)
 80001ec:	6808      	ldr	r0, [r1, #0]
 80001ee:	6812      	ldr	r2, [r2, #0]
 80001f0:	1a12      	subs	r2, r2, r0
 80001f2:	4293      	cmp	r3, r2
 80001f4:	d803      	bhi.n	80001fe <chCoreAlloc+0x1e>
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 80001f6:	18c3      	adds	r3, r0, r3
 80001f8:	600b      	str	r3, [r1, #0]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80001fa:	b662      	cpsie	i
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 80001fc:	4770      	bx	lr

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 80001fe:	2000      	movs	r0, #0
 8000200:	e7fb      	b.n	80001fa <chCoreAlloc+0x1a>
 8000202:	46c0      	nop			; (mov r8, r8)
 8000204:	20000920 	.word	0x20000920
 8000208:	20000600 	.word	0x20000600
 800020c:	00000000 	.word	0x00000000

08000210 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 8000210:	2380      	movs	r3, #128	; 0x80
 8000212:	4a02      	ldr	r2, [pc, #8]	; (800021c <notify2+0xc>)
 8000214:	6811      	ldr	r1, [r2, #0]
 8000216:	430b      	orrs	r3, r1
 8000218:	6013      	str	r3, [r2, #0]
}
 800021a:	4770      	bx	lr
 800021c:	40004400 	.word	0x40004400

08000220 <_port_irq_epilogue>:
 *
 * @param[in] lr        value of the @p LR register on ISR entry
 */
void _port_irq_epilogue(regarm_t lr) {

  if (lr != (regarm_t)0xFFFFFFF1U) {
 8000220:	300f      	adds	r0, #15
 8000222:	d011      	beq.n	8000248 <_port_irq_epilogue+0x28>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000224:	b672      	cpsid	i
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000226:	f3ef 8309 	mrs	r3, PSP

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800022a:	3b20      	subs	r3, #32
 800022c:	f383 8809 	msr	PSP, r3

    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8000230:	2280      	movs	r2, #128	; 0x80
 8000232:	0452      	lsls	r2, r2, #17
 8000234:	61da      	str	r2, [r3, #28]
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8000236:	4a06      	ldr	r2, [pc, #24]	; (8000250 <_port_irq_epilogue+0x30>)
 8000238:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 800023a:	6992      	ldr	r2, [r2, #24]

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 800023c:	6889      	ldr	r1, [r1, #8]
 800023e:	6892      	ldr	r2, [r2, #8]
 8000240:	4291      	cmp	r1, r2
 8000242:	d802      	bhi.n	800024a <_port_irq_epilogue+0x2a>
      ctxp->pc = (regarm_t)_port_switch_from_isr;
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8000244:	4a03      	ldr	r2, [pc, #12]	; (8000254 <_port_irq_epilogue+0x34>)
 8000246:	619a      	str	r2, [r3, #24]
    }

    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
  }
}
 8000248:	4770      	bx	lr

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 800024a:	4a03      	ldr	r2, [pc, #12]	; (8000258 <_port_irq_epilogue+0x38>)
 800024c:	619a      	str	r2, [r3, #24]
 800024e:	e7fb      	b.n	8000248 <_port_irq_epilogue+0x28>
 8000250:	200007d0 	.word	0x200007d0
 8000254:	080001c0 	.word	0x080001c0
 8000258:	080001bd 	.word	0x080001bd
 800025c:	00000000 	.word	0x00000000

08000260 <NMI_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000260:	f3ef 8309 	mrs	r3, PSP

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000264:	3320      	adds	r3, #32
 8000266:	f383 8809 	msr	PSP, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800026a:	b662      	cpsie	i
  /* Writing back the modified PSP value.*/
  __set_PSP((uint32_t)ctxp);

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <wakeup>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000270:	b672      	cpsid	i
 */
static void wakeup(void *p) {
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8000272:	7f03      	ldrb	r3, [r0, #28]
 8000274:	2b07      	cmp	r3, #7
 8000276:	d80c      	bhi.n	8000292 <wakeup+0x22>
 8000278:	4a11      	ldr	r2, [pc, #68]	; (80002c0 <wakeup+0x50>)
 800027a:	009b      	lsls	r3, r3, #2
 800027c:	58d3      	ldr	r3, [r2, r3]
 800027e:	469f      	mov	pc, r3
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 8000280:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 8000282:	6893      	ldr	r3, [r2, #8]
 8000284:	3301      	adds	r3, #1
 8000286:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8000288:	6802      	ldr	r2, [r0, #0]
 800028a:	6843      	ldr	r3, [r0, #4]
 800028c:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 800028e:	6802      	ldr	r2, [r0, #0]
 8000290:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8000292:	2301      	movs	r3, #1
 8000294:	425b      	negs	r3, r3
 8000296:	6203      	str	r3, [r0, #32]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000298:	2300      	movs	r3, #0
 800029a:	6882      	ldr	r2, [r0, #8]
 800029c:	7703      	strb	r3, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 800029e:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <wakeup+0x54>)
  do {
    cp = cp->p_next;
 80002a0:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80002a2:	6899      	ldr	r1, [r3, #8]
 80002a4:	4291      	cmp	r1, r2
 80002a6:	d2fb      	bcs.n	80002a0 <wakeup+0x30>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80002a8:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80002aa:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
 80002ac:	6042      	str	r2, [r0, #4]
  tp->p_prev->p_next = tp;
 80002ae:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 80002b0:	6058      	str	r0, [r3, #4]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80002b2:	b662      	cpsie	i
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80002b4:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 80002b6:	2200      	movs	r2, #0
 80002b8:	6a03      	ldr	r3, [r0, #32]
 80002ba:	601a      	str	r2, [r3, #0]
 80002bc:	e7e9      	b.n	8000292 <wakeup+0x22>
 80002be:	46c0      	nop			; (mov r8, r8)
 80002c0:	08000eb0 	.word	0x08000eb0
 80002c4:	200007d0 	.word	0x200007d0
	...

080002d0 <chSchReadyI>:
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80002d0:	2300      	movs	r3, #0
 80002d2:	6882      	ldr	r2, [r0, #8]
 80002d4:	7703      	strb	r3, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 80002d6:	4b05      	ldr	r3, [pc, #20]	; (80002ec <chSchReadyI+0x1c>)
  do {
    cp = cp->p_next;
 80002d8:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80002da:	6899      	ldr	r1, [r3, #8]
 80002dc:	4291      	cmp	r1, r2
 80002de:	d2fb      	bcs.n	80002d8 <chSchReadyI+0x8>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80002e0:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80002e2:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
 80002e4:	6042      	str	r2, [r0, #4]
  tp->p_prev->p_next = tp;
 80002e6:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 80002e8:	6058      	str	r0, [r3, #4]

  return tp;
}
 80002ea:	4770      	bx	lr
 80002ec:	200007d0 	.word	0x200007d0

080002f0 <chEvtBroadcastFlagsI.constprop.9>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80002f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 80002f2:	4b18      	ldr	r3, [pc, #96]	; (8000354 <chEvtBroadcastFlagsI.constprop.9+0x64>)
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80002f4:	0005      	movs	r5, r0
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 80002f6:	685c      	ldr	r4, [r3, #4]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 80002f8:	3304      	adds	r3, #4
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 80002fa:	2700      	movs	r7, #0
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 80002fc:	001e      	movs	r6, r3
 80002fe:	429c      	cmp	r4, r3
 8000300:	d103      	bne.n	800030a <chEvtBroadcastFlagsI.constprop.9+0x1a>
 8000302:	e01e      	b.n	8000342 <chEvtBroadcastFlagsI.constprop.9+0x52>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
    }
    elp = elp->el_next;
 8000304:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000306:	42b4      	cmp	r4, r6
 8000308:	d01b      	beq.n	8000342 <chEvtBroadcastFlagsI.constprop.9+0x52>
  /*lint -restore*/
    elp->el_flags |= flags;
 800030a:	68e3      	ldr	r3, [r4, #12]
 800030c:	432b      	orrs	r3, r5
 800030e:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8000310:	2d00      	cmp	r5, #0
 8000312:	d002      	beq.n	800031a <chEvtBroadcastFlagsI.constprop.9+0x2a>
 8000314:	6922      	ldr	r2, [r4, #16]
 8000316:	421a      	tst	r2, r3
 8000318:	d0f4      	beq.n	8000304 <chEvtBroadcastFlagsI.constprop.9+0x14>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 800031a:	6860      	ldr	r0, [r4, #4]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 800031c:	68a3      	ldr	r3, [r4, #8]
 800031e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8000320:	4313      	orrs	r3, r2
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000322:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8000324:	6343      	str	r3, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000326:	2a0a      	cmp	r2, #10
 8000328:	d00c      	beq.n	8000344 <chEvtBroadcastFlagsI.constprop.9+0x54>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 800032a:	2a0b      	cmp	r2, #11
 800032c:	d1ea      	bne.n	8000304 <chEvtBroadcastFlagsI.constprop.9+0x14>
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 800032e:	6a02      	ldr	r2, [r0, #32]

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 8000330:	4013      	ands	r3, r2
 8000332:	429a      	cmp	r2, r3
 8000334:	d1e6      	bne.n	8000304 <chEvtBroadcastFlagsI.constprop.9+0x14>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 8000336:	6207      	str	r7, [r0, #32]
    (void) chSchReadyI(tp);
 8000338:	f7ff ffca 	bl	80002d0 <chSchReadyI>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
    }
    elp = elp->el_next;
 800033c:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 800033e:	42b4      	cmp	r4, r6
 8000340:	d1e3      	bne.n	800030a <chEvtBroadcastFlagsI.constprop.9+0x1a>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
    }
    elp = elp->el_next;
  }
}
 8000342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000344:	6a02      	ldr	r2, [r0, #32]
 8000346:	421a      	tst	r2, r3
 8000348:	d0dc      	beq.n	8000304 <chEvtBroadcastFlagsI.constprop.9+0x14>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 800034a:	6207      	str	r7, [r0, #32]
    (void) chSchReadyI(tp);
 800034c:	f7ff ffc0 	bl	80002d0 <chSchReadyI>
 8000350:	e7f4      	b.n	800033c <chEvtBroadcastFlagsI.constprop.9+0x4c>
 8000352:	46c0      	nop			; (mov r8, r8)
 8000354:	20000750 	.word	0x20000750
	...

08000360 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8000360:	e7fe      	b.n	8000360 <BusFault_Handler>
 8000362:	46c0      	nop			; (mov r8, r8)
	...

08000370 <chSchWakeupS.constprop.16>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8000370:	b570      	push	{r4, r5, r6, lr}
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8000372:	2500      	movs	r5, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8000374:	4b11      	ldr	r3, [pc, #68]	; (80003bc <chSchWakeupS.constprop.16+0x4c>)
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8000376:	6205      	str	r5, [r0, #32]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8000378:	6999      	ldr	r1, [r3, #24]
 800037a:	6882      	ldr	r2, [r0, #8]
 800037c:	688c      	ldr	r4, [r1, #8]
 800037e:	42a2      	cmp	r2, r4
 8000380:	d80a      	bhi.n	8000398 <chSchWakeupS.constprop.16+0x28>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000382:	7705      	strb	r5, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8000384:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8000386:	6899      	ldr	r1, [r3, #8]
 8000388:	428a      	cmp	r2, r1
 800038a:	d9fb      	bls.n	8000384 <chSchWakeupS.constprop.16+0x14>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800038c:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800038e:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
 8000390:	6042      	str	r2, [r0, #4]
  tp->p_prev->p_next = tp;
 8000392:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 8000394:	6058      	str	r0, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 8000396:	bd70      	pop	{r4, r5, r6, pc}
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
  cp = (thread_t *)&ch.rlist.r_queue;
 8000398:	001a      	movs	r2, r3
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800039a:	770d      	strb	r5, [r1, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800039c:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 800039e:	6895      	ldr	r5, [r2, #8]
 80003a0:	42ac      	cmp	r4, r5
 80003a2:	d9fb      	bls.n	800039c <chSchWakeupS.constprop.16+0x2c>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80003a4:	6854      	ldr	r4, [r2, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80003a6:	600a      	str	r2, [r1, #0]
  tp->p_prev = cp->p_prev;
 80003a8:	604c      	str	r4, [r1, #4]
  tp->p_prev->p_next = tp;
 80003aa:	6021      	str	r1, [r4, #0]
  cp->p_prev = tp;
 80003ac:	6051      	str	r1, [r2, #4]
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 80003ae:	6198      	str	r0, [r3, #24]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 80003b0:	2301      	movs	r3, #1
 80003b2:	7703      	strb	r3, [r0, #28]
    chSysSwitch(ntp, otp);
 80003b4:	f7ff feec 	bl	8000190 <_port_switch>
 80003b8:	e7ed      	b.n	8000396 <chSchWakeupS.constprop.16+0x26>
 80003ba:	46c0      	nop			; (mov r8, r8)
 80003bc:	200007d0 	.word	0x200007d0

080003c0 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 80003c0:	4b06      	ldr	r3, [pc, #24]	; (80003dc <chSchGoSleepS+0x1c>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 80003c2:	b510      	push	{r4, lr}
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 80003c4:	6999      	ldr	r1, [r3, #24]
  otp->p_state = newstate;
 80003c6:	7708      	strb	r0, [r1, #28]
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 80003c8:	6818      	ldr	r0, [r3, #0]

  tqp->p_next = tp->p_next;
 80003ca:	6802      	ldr	r2, [r0, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 80003cc:	6053      	str	r3, [r2, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80003ce:	601a      	str	r2, [r3, #0]
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 80003d0:	6198      	str	r0, [r3, #24]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80003d2:	2301      	movs	r3, #1
 80003d4:	7703      	strb	r3, [r0, #28]
  chSysSwitch(currp, otp);
 80003d6:	f7ff fedb 	bl	8000190 <_port_switch>
}
 80003da:	bd10      	pop	{r4, pc}
 80003dc:	200007d0 	.word	0x200007d0

080003e0 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 80003e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003e2:	b087      	sub	sp, #28

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 80003e4:	1c4b      	adds	r3, r1, #1
 80003e6:	d047      	beq.n	8000478 <chSchGoSleepTimeoutS+0x98>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 80003e8:	4e3f      	ldr	r6, [pc, #252]	; (80004e8 <chSchGoSleepTimeoutS+0x108>)
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 80003ea:	ad01      	add	r5, sp, #4
 80003ec:	69b3      	ldr	r3, [r6, #24]
 80003ee:	612b      	str	r3, [r5, #16]
  vtp->vt_func = vtfunc;
 80003f0:	4b3e      	ldr	r3, [pc, #248]	; (80004ec <chSchGoSleepTimeoutS+0x10c>)
 80003f2:	60eb      	str	r3, [r5, #12]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80003f4:	2380      	movs	r3, #128	; 0x80
 80003f6:	05db      	lsls	r3, r3, #23
 80003f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  {
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
 80003fa:	2901      	cmp	r1, #1
 80003fc:	d95d      	bls.n	80004ba <chSchGoSleepTimeoutS+0xda>
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80003fe:	0034      	movs	r4, r6
 8000400:	69f3      	ldr	r3, [r6, #28]
 8000402:	341c      	adds	r4, #28
 8000404:	42a3      	cmp	r3, r4
 8000406:	d05c      	beq.n	80004c2 <chSchGoSleepTimeoutS+0xe2>
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 8000408:	1851      	adds	r1, r2, r1
    if (delta < ch.vtlist.vt_next->vt_delta) {
 800040a:	689c      	ldr	r4, [r3, #8]
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 800040c:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800040e:	1a8a      	subs	r2, r1, r2
    if (delta < ch.vtlist.vt_next->vt_delta) {
 8000410:	42a2      	cmp	r2, r4
 8000412:	d207      	bcs.n	8000424 <chSchGoSleepTimeoutS+0x44>
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000414:	2780      	movs	r7, #128	; 0x80
 8000416:	05ff      	lsls	r7, r7, #23
 8000418:	6379      	str	r1, [r7, #52]	; 0x34
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 800041a:	4294      	cmp	r4, r2
 800041c:	d204      	bcs.n	8000428 <chSchGoSleepTimeoutS+0x48>
    delta -= p->vt_delta;
    p = p->vt_next;
 800041e:	681b      	ldr	r3, [r3, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 8000420:	1b12      	subs	r2, r2, r4
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8000422:	689c      	ldr	r4, [r3, #8]
 8000424:	4294      	cmp	r4, r2
 8000426:	d3fa      	bcc.n	800041e <chSchGoSleepTimeoutS+0x3e>
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8000428:	6859      	ldr	r1, [r3, #4]
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 800042a:	9301      	str	r3, [sp, #4]
  vtp->vt_prev = vtp->vt_next->vt_prev;
 800042c:	6069      	str	r1, [r5, #4]
  vtp->vt_prev->vt_next = vtp;
 800042e:	600d      	str	r5, [r1, #0]
  p->vt_prev = vtp;
 8000430:	605d      	str	r5, [r3, #4]
  vtp->vt_delta = delta
 8000432:	60aa      	str	r2, [r5, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8000434:	6899      	ldr	r1, [r3, #8]
 8000436:	1a8a      	subs	r2, r1, r2
 8000438:	609a      	str	r2, [r3, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 800043a:	2301      	movs	r3, #1
 800043c:	425b      	negs	r3, r3
 800043e:	6273      	str	r3, [r6, #36]	; 0x24
    chSchGoSleepS(newstate);
 8000440:	f7ff ffbe 	bl	80003c0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8000444:	9b04      	ldr	r3, [sp, #16]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d012      	beq.n	8000470 <chSchGoSleepTimeoutS+0x90>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 800044a:	69f3      	ldr	r3, [r6, #28]
 800044c:	42ab      	cmp	r3, r5
 800044e:	d017      	beq.n	8000480 <chSchGoSleepTimeoutS+0xa0>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 8000450:	686a      	ldr	r2, [r5, #4]
 8000452:	9b01      	ldr	r3, [sp, #4]
 8000454:	6013      	str	r3, [r2, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8000456:	9b01      	ldr	r3, [sp, #4]
 8000458:	605a      	str	r2, [r3, #4]
    vtp->vt_func = NULL;
 800045a:	2200      	movs	r2, #0
 800045c:	60ea      	str	r2, [r5, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 800045e:	0032      	movs	r2, r6
 8000460:	321c      	adds	r2, #28
 8000462:	4293      	cmp	r3, r2
 8000464:	d004      	beq.n	8000470 <chSchGoSleepTimeoutS+0x90>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 8000466:	6899      	ldr	r1, [r3, #8]
 8000468:	68aa      	ldr	r2, [r5, #8]
 800046a:	468c      	mov	ip, r1
 800046c:	4462      	add	r2, ip
 800046e:	609a      	str	r2, [r3, #8]
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 8000470:	69b3      	ldr	r3, [r6, #24]
 8000472:	6a18      	ldr	r0, [r3, #32]
}
 8000474:	b007      	add	sp, #28
 8000476:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 8000478:	f7ff ffa2 	bl	80003c0 <chSchGoSleepS>
 800047c:	4e1a      	ldr	r6, [pc, #104]	; (80004e8 <chSchGoSleepTimeoutS+0x108>)
 800047e:	e7f7      	b.n	8000470 <chSchGoSleepTimeoutS+0x90>
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000480:	0033      	movs	r3, r6
  vtp->vt_func = NULL;
 8000482:	2100      	movs	r1, #0

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 8000484:	682a      	ldr	r2, [r5, #0]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000486:	331c      	adds	r3, #28

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 8000488:	61f2      	str	r2, [r6, #28]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800048a:	6053      	str	r3, [r2, #4]
  vtp->vt_func = NULL;
 800048c:	60e9      	str	r1, [r5, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800048e:	429a      	cmp	r2, r3
 8000490:	d026      	beq.n	80004e0 <chSchGoSleepTimeoutS+0x100>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8000492:	6891      	ldr	r1, [r2, #8]
 8000494:	68ab      	ldr	r3, [r5, #8]
 8000496:	468c      	mov	ip, r1
 8000498:	4463      	add	r3, ip
 800049a:	6093      	str	r3, [r2, #8]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 800049c:	2280      	movs	r2, #128	; 0x80
 800049e:	05d2      	lsls	r2, r2, #23
 80004a0:	6a51      	ldr	r1, [r2, #36]	; 0x24
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 80004a2:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 80004a4:	1a8a      	subs	r2, r1, r2

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d9e2      	bls.n	8000470 <chSchGoSleepTimeoutS+0x90>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 80004aa:	1a9b      	subs	r3, r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
 80004ac:	2b01      	cmp	r3, #1
 80004ae:	d906      	bls.n	80004be <chSchGoSleepTimeoutS+0xde>
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80004b0:	2280      	movs	r2, #128	; 0x80
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
 80004b2:	18cb      	adds	r3, r1, r3
 80004b4:	05d2      	lsls	r2, r2, #23
 80004b6:	6353      	str	r3, [r2, #52]	; 0x34
 80004b8:	e7da      	b.n	8000470 <chSchGoSleepTimeoutS+0x90>
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 80004ba:	2102      	movs	r1, #2
 80004bc:	e79f      	b.n	80003fe <chSchGoSleepTimeoutS+0x1e>
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 80004be:	2302      	movs	r3, #2
 80004c0:	e7f6      	b.n	80004b0 <chSchGoSleepTimeoutS+0xd0>
      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
      ch.vtlist.vt_prev = vtp;
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 80004c2:	9301      	str	r3, [sp, #4]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80004c4:	606b      	str	r3, [r5, #4]
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80004c6:	2380      	movs	r3, #128	; 0x80
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
 80004c8:	62b2      	str	r2, [r6, #40]	; 0x28
      ch.vtlist.vt_next = vtp;
      ch.vtlist.vt_prev = vtp;
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_delta = delay;
 80004ca:	60a9      	str	r1, [r5, #8]

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 80004cc:	1851      	adds	r1, r2, r1
  STM32_ST_TIM->SR     = 0;
 80004ce:	2200      	movs	r2, #0
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80004d0:	05db      	lsls	r3, r3, #23
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
 80004d2:	61f5      	str	r5, [r6, #28]
      ch.vtlist.vt_prev = vtp;
 80004d4:	6235      	str	r5, [r6, #32]
 80004d6:	6359      	str	r1, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 80004d8:	611a      	str	r2, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80004da:	3202      	adds	r2, #2
 80004dc:	60da      	str	r2, [r3, #12]
 80004de:	e7af      	b.n	8000440 <chSchGoSleepTimeoutS+0x60>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	05db      	lsls	r3, r3, #23
 80004e4:	60d9      	str	r1, [r3, #12]
 80004e6:	e7c3      	b.n	8000470 <chSchGoSleepTimeoutS+0x90>
 80004e8:	200007d0 	.word	0x200007d0
 80004ec:	08000271 	.word	0x08000271

080004f0 <Thread1>:

/*
 * LEDs blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 80004f0:	b570      	push	{r4, r5, r6, lr}

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    // Update LED pins
    palSetPad(GPIOA, GPIOA_STAT_HBT);
 80004f2:	2490      	movs	r4, #144	; 0x90
 80004f4:	2601      	movs	r6, #1
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 80004f6:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <Thread1+0x34>)
 80004f8:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <Thread1+0x38>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	05e4      	lsls	r4, r4, #23
 80004fe:	619a      	str	r2, [r3, #24]
    palSetPad(GPIOA, GPIOA_STAT_WRN);
 8000500:	2502      	movs	r5, #2

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    // Update LED pins
    palSetPad(GPIOA, GPIOA_STAT_HBT);
 8000502:	8326      	strh	r6, [r4, #24]
    palSetPad(GPIOA, GPIOA_STAT_WRN);
 8000504:	8325      	strh	r5, [r4, #24]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000506:	b672      	cpsid	i
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8000508:	4908      	ldr	r1, [pc, #32]	; (800052c <Thread1+0x3c>)
 800050a:	2008      	movs	r0, #8
 800050c:	f7ff ff68 	bl	80003e0 <chSchGoSleepTimeoutS>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000510:	b662      	cpsie	i
    chThdSleepMilliseconds(500);
    palClearPad(GPIOA, GPIOA_STAT_HBT);
 8000512:	8366      	strh	r6, [r4, #26]
    palClearPad(GPIOA, GPIOA_STAT_WRN);
 8000514:	8365      	strh	r5, [r4, #26]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000516:	b672      	cpsid	i
 8000518:	4904      	ldr	r1, [pc, #16]	; (800052c <Thread1+0x3c>)
 800051a:	2008      	movs	r0, #8
 800051c:	f7ff ff60 	bl	80003e0 <chSchGoSleepTimeoutS>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000520:	b662      	cpsie	i
 8000522:	e7ed      	b.n	8000500 <Thread1+0x10>
 8000524:	200007d0 	.word	0x200007d0
 8000528:	08000ef0 	.word	0x08000ef0
 800052c:	00001388 	.word	0x00001388

08000530 <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8000530:	b510      	push	{r4, lr}

  if (TIME_IMMEDIATE == timeout) {
 8000532:	2900      	cmp	r1, #0
 8000534:	d00a      	beq.n	800054c <chThdEnqueueTimeoutS+0x1c>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8000536:	4b07      	ldr	r3, [pc, #28]	; (8000554 <chThdEnqueueTimeoutS+0x24>)
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8000538:	6842      	ldr	r2, [r0, #4]
 800053a:	699b      	ldr	r3, [r3, #24]
  cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 800053c:	6018      	str	r0, [r3, #0]
  tp->p_prev = tqp->p_prev;
 800053e:	605a      	str	r2, [r3, #4]
  tp->p_prev->p_next = tp;
 8000540:	6013      	str	r3, [r2, #0]
  tqp->p_prev = tp;
 8000542:	6043      	str	r3, [r0, #4]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000544:	2004      	movs	r0, #4
 8000546:	f7ff ff4b 	bl	80003e0 <chSchGoSleepTimeoutS>
}
 800054a:	bd10      	pop	{r4, pc}
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
 800054c:	2001      	movs	r0, #1
 800054e:	4240      	negs	r0, r0
 8000550:	e7fb      	b.n	800054a <chThdEnqueueTimeoutS+0x1a>
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	200007d0 	.word	0x200007d0
	...

08000560 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 8000560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000562:	464e      	mov	r6, r9
 8000564:	4645      	mov	r5, r8
 8000566:	4657      	mov	r7, sl
 8000568:	4699      	mov	r9, r3
  qnotify_t nfy = oqp->q_notify;
 800056a:	69c3      	ldr	r3, [r0, #28]
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 800056c:	b4e0      	push	{r5, r6, r7}
 800056e:	0004      	movs	r4, r0
 8000570:	000e      	movs	r6, r1
 8000572:	0015      	movs	r5, r2
  qnotify_t nfy = oqp->q_notify;
 8000574:	4698      	mov	r8, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000576:	b672      	cpsid	i
  size_t w = 0;
 8000578:	2700      	movs	r7, #0
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 800057a:	68a3      	ldr	r3, [r4, #8]

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 800057c:	2b00      	cmp	r3, #0
 800057e:	d01e      	beq.n	80005be <chOQWriteTimeout+0x5e>
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8000580:	68a3      	ldr	r3, [r4, #8]
 8000582:	3b01      	subs	r3, #1
 8000584:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8000586:	6963      	ldr	r3, [r4, #20]
 8000588:	1c5a      	adds	r2, r3, #1
 800058a:	6162      	str	r2, [r4, #20]
 800058c:	1c72      	adds	r2, r6, #1
 800058e:	4692      	mov	sl, r2
 8000590:	7832      	ldrb	r2, [r6, #0]
 8000592:	701a      	strb	r2, [r3, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8000594:	6963      	ldr	r3, [r4, #20]
 8000596:	6922      	ldr	r2, [r4, #16]
 8000598:	4293      	cmp	r3, r2
 800059a:	d301      	bcc.n	80005a0 <chOQWriteTimeout+0x40>
      oqp->q_wrptr = oqp->q_buffer;
 800059c:	68e3      	ldr	r3, [r4, #12]
 800059e:	6163      	str	r3, [r4, #20]
    }

    if (nfy != NULL) {
 80005a0:	4643      	mov	r3, r8
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <chOQWriteTimeout+0x4a>
      nfy(oqp);
 80005a6:	0020      	movs	r0, r4
 80005a8:	47c0      	blx	r8
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80005aa:	b662      	cpsie	i
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 80005ac:	3d01      	subs	r5, #1
    if (nfy != NULL) {
      nfy(oqp);
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
 80005ae:	3701      	adds	r7, #1
    if (--n == 0U) {
 80005b0:	2d00      	cmp	r5, #0
 80005b2:	d00b      	beq.n	80005cc <chOQWriteTimeout+0x6c>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b4:	b672      	cpsid	i
 80005b6:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 80005b8:	4656      	mov	r6, sl

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d1e0      	bne.n	8000580 <chOQWriteTimeout+0x20>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 80005be:	4649      	mov	r1, r9
 80005c0:	0020      	movs	r0, r4
 80005c2:	f7ff ffb5 	bl	8000530 <chThdEnqueueTimeoutS>
 80005c6:	2800      	cmp	r0, #0
 80005c8:	d0d7      	beq.n	800057a <chOQWriteTimeout+0x1a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80005ca:	b662      	cpsie	i
    if (--n == 0U) {
      return w;
    }
    chSysLock();
  }
}
 80005cc:	0038      	movs	r0, r7
 80005ce:	bc1c      	pop	{r2, r3, r4}
 80005d0:	4690      	mov	r8, r2
 80005d2:	4699      	mov	r9, r3
 80005d4:	46a2      	mov	sl, r4
 80005d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080005e0 <writet>:
static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {
 80005e0:	b510      	push	{r4, lr}

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 80005e2:	3030      	adds	r0, #48	; 0x30
 80005e4:	f7ff ffbc 	bl	8000560 <chOQWriteTimeout>
}
 80005e8:	bd10      	pop	{r4, pc}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	0000      	movs	r0, r0
	...

080005f0 <write>:
 * queue-level function or macro.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 80005f0:	2301      	movs	r3, #1
/*
 * Interface implementation, the following functions just invoke the equivalent
 * queue-level function or macro.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {
 80005f2:	b510      	push	{r4, lr}

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 80005f4:	3030      	adds	r0, #48	; 0x30
 80005f6:	425b      	negs	r3, r3
 80005f8:	f7ff ffb2 	bl	8000560 <chOQWriteTimeout>
                        n, TIME_INFINITE);
}
 80005fc:	bd10      	pop	{r4, pc}
 80005fe:	46c0      	nop			; (mov r8, r8)

08000600 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	0004      	movs	r4, r0
 8000604:	000e      	movs	r6, r1
 8000606:	0015      	movs	r5, r2
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000608:	b672      	cpsid	i
 800060a:	e005      	b.n	8000618 <chOQPutTimeout+0x18>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 800060c:	0029      	movs	r1, r5
 800060e:	0020      	movs	r0, r4
 8000610:	f7ff ff8e 	bl	8000530 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8000614:	2800      	cmp	r0, #0
 8000616:	db17      	blt.n	8000648 <chOQPutTimeout+0x48>
 8000618:	68a3      	ldr	r3, [r4, #8]
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 800061a:	2b00      	cmp	r3, #0
 800061c:	d0f6      	beq.n	800060c <chOQPutTimeout+0xc>
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 800061e:	68a3      	ldr	r3, [r4, #8]
 8000620:	3b01      	subs	r3, #1
 8000622:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8000624:	6963      	ldr	r3, [r4, #20]
 8000626:	1c5a      	adds	r2, r3, #1
 8000628:	6162      	str	r2, [r4, #20]
 800062a:	701e      	strb	r6, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 800062c:	6963      	ldr	r3, [r4, #20]
 800062e:	6922      	ldr	r2, [r4, #16]
 8000630:	4293      	cmp	r3, r2
 8000632:	d301      	bcc.n	8000638 <chOQPutTimeout+0x38>
    oqp->q_wrptr = oqp->q_buffer;
 8000634:	68e3      	ldr	r3, [r4, #12]
 8000636:	6163      	str	r3, [r4, #20]
  }

  if (oqp->q_notify != NULL) {
 8000638:	69e3      	ldr	r3, [r4, #28]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <chOQPutTimeout+0x42>
    oqp->q_notify(oqp);
 800063e:	0020      	movs	r0, r4
 8000640:	4798      	blx	r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000642:	b662      	cpsie	i
 8000644:	2000      	movs	r0, #0
  }
  chSysUnlock();

  return Q_OK;
}
 8000646:	bd70      	pop	{r4, r5, r6, pc}
 8000648:	b662      	cpsie	i
 800064a:	e7fc      	b.n	8000646 <chOQPutTimeout+0x46>
 800064c:	0000      	movs	r0, r0
	...

08000650 <putt>:
static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {
 8000650:	b510      	push	{r4, lr}

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8000652:	3030      	adds	r0, #48	; 0x30
 8000654:	f7ff ffd4 	bl	8000600 <chOQPutTimeout>
}
 8000658:	bd10      	pop	{r4, pc}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	0000      	movs	r0, r0
	...

08000660 <put>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8000660:	2201      	movs	r2, #1

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {
 8000662:	b510      	push	{r4, lr}

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8000664:	3030      	adds	r0, #48	; 0x30
 8000666:	4252      	negs	r2, r2
 8000668:	f7ff ffca 	bl	8000600 <chOQPutTimeout>
}
 800066c:	bd10      	pop	{r4, pc}
 800066e:	46c0      	nop			; (mov r8, r8)

08000670 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 8000670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000672:	464f      	mov	r7, r9
 8000674:	4646      	mov	r6, r8
 8000676:	0004      	movs	r4, r0
 8000678:	b4c0      	push	{r6, r7}
 800067a:	4689      	mov	r9, r1
 800067c:	4690      	mov	r8, r2
 800067e:	001d      	movs	r5, r3
  qnotify_t nfy = iqp->q_notify;
 8000680:	69c7      	ldr	r7, [r0, #28]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000682:	b672      	cpsid	i
  size_t r = 0;
 8000684:	2600      	movs	r6, #0

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    if (nfy != NULL) {
 8000686:	2f00      	cmp	r7, #0
 8000688:	d008      	beq.n	800069c <chIQReadTimeout+0x2c>
      nfy(iqp);
 800068a:	0020      	movs	r0, r4
 800068c:	47b8      	blx	r7
 800068e:	e005      	b.n	800069c <chIQReadTimeout+0x2c>
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 8000690:	0029      	movs	r1, r5
 8000692:	0020      	movs	r0, r4
 8000694:	f7ff ff4c 	bl	8000530 <chThdEnqueueTimeoutS>
 8000698:	2800      	cmp	r0, #0
 800069a:	d117      	bne.n	80006cc <chIQReadTimeout+0x5c>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 800069c:	68a3      	ldr	r3, [r4, #8]
  while (true) {
    if (nfy != NULL) {
      nfy(iqp);
    }

    while (chIQIsEmptyI(iqp)) {
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d0f6      	beq.n	8000690 <chIQReadTimeout+0x20>
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 80006a2:	68a3      	ldr	r3, [r4, #8]
 80006a4:	3b01      	subs	r3, #1
 80006a6:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 80006a8:	69a3      	ldr	r3, [r4, #24]
 80006aa:	1c5a      	adds	r2, r3, #1
 80006ac:	61a2      	str	r2, [r4, #24]
 80006ae:	464a      	mov	r2, r9
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	5593      	strb	r3, [r2, r6]
    if (iqp->q_rdptr >= iqp->q_top) {
 80006b4:	69a3      	ldr	r3, [r4, #24]
 80006b6:	6922      	ldr	r2, [r4, #16]
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d301      	bcc.n	80006c0 <chIQReadTimeout+0x50>
      iqp->q_rdptr = iqp->q_buffer;
 80006bc:	68e3      	ldr	r3, [r4, #12]
 80006be:	61a3      	str	r3, [r4, #24]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80006c0:	b662      	cpsie	i
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
 80006c2:	3601      	adds	r6, #1
    if (--n == 0U) {
 80006c4:	45b0      	cmp	r8, r6
 80006c6:	d002      	beq.n	80006ce <chIQReadTimeout+0x5e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c8:	b672      	cpsid	i
 80006ca:	e7dc      	b.n	8000686 <chIQReadTimeout+0x16>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80006cc:	b662      	cpsie	i
      return r;
    }

    chSysLock();
  }
}
 80006ce:	0030      	movs	r0, r6
 80006d0:	bc0c      	pop	{r2, r3}
 80006d2:	4690      	mov	r8, r2
 80006d4:	4699      	mov	r9, r3
 80006d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080006e0 <readt>:
static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {
 80006e0:	b510      	push	{r4, lr}

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 80006e2:	300c      	adds	r0, #12
 80006e4:	f7ff ffc4 	bl	8000670 <chIQReadTimeout>
}
 80006e8:	bd10      	pop	{r4, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	0000      	movs	r0, r0
	...

080006f0 <read>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 80006f0:	2301      	movs	r3, #1

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {
 80006f2:	b510      	push	{r4, lr}

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 80006f4:	300c      	adds	r0, #12
 80006f6:	425b      	negs	r3, r3
 80006f8:	f7ff ffba 	bl	8000670 <chIQReadTimeout>
                       n, TIME_INFINITE);
}
 80006fc:	bd10      	pop	{r4, pc}
 80006fe:	46c0      	nop			; (mov r8, r8)

08000700 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8000700:	b570      	push	{r4, r5, r6, lr}
 8000702:	0004      	movs	r4, r0
 8000704:	000d      	movs	r5, r1
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000706:	b672      	cpsid	i
  uint8_t b;

  chSysLock();
  if (iqp->q_notify != NULL) {
 8000708:	69c3      	ldr	r3, [r0, #28]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d007      	beq.n	800071e <chIQGetTimeout+0x1e>
    iqp->q_notify(iqp);
 800070e:	4798      	blx	r3
 8000710:	e005      	b.n	800071e <chIQGetTimeout+0x1e>
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8000712:	0029      	movs	r1, r5
 8000714:	0020      	movs	r0, r4
 8000716:	f7ff ff0b 	bl	8000530 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 800071a:	2800      	cmp	r0, #0
 800071c:	db0e      	blt.n	800073c <chIQGetTimeout+0x3c>
 800071e:	68a3      	ldr	r3, [r4, #8]
  chSysLock();
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
 8000720:	2b00      	cmp	r3, #0
 8000722:	d0f6      	beq.n	8000712 <chIQGetTimeout+0x12>
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8000724:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8000726:	69a2      	ldr	r2, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8000728:	3b01      	subs	r3, #1
 800072a:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 800072c:	1c53      	adds	r3, r2, #1
 800072e:	61a3      	str	r3, [r4, #24]
 8000730:	7810      	ldrb	r0, [r2, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
 8000732:	6922      	ldr	r2, [r4, #16]
 8000734:	4293      	cmp	r3, r2
 8000736:	d301      	bcc.n	800073c <chIQGetTimeout+0x3c>
    iqp->q_rdptr = iqp->q_buffer;
 8000738:	68e3      	ldr	r3, [r4, #12]
 800073a:	61a3      	str	r3, [r4, #24]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800073c:	b662      	cpsie	i
  }
  chSysUnlock();

  return (msg_t)b;
}
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <gett>:
static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {
 8000740:	b510      	push	{r4, lr}

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8000742:	300c      	adds	r0, #12
 8000744:	f7ff ffdc 	bl	8000700 <chIQGetTimeout>
}
 8000748:	bd10      	pop	{r4, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	0000      	movs	r0, r0
	...

08000750 <get>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8000750:	2101      	movs	r1, #1
static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {
 8000752:	b510      	push	{r4, lr}

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8000754:	300c      	adds	r0, #12
 8000756:	4249      	negs	r1, r1
 8000758:	f7ff ffd2 	bl	8000700 <chIQGetTimeout>
}
 800075c:	bd10      	pop	{r4, pc}
 800075e:	46c0      	nop			; (mov r8, r8)

08000760 <VectorB0>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8000760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000762:	4646      	mov	r6, r8
 8000764:	464f      	mov	r7, r9
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 8000766:	4c57      	ldr	r4, [pc, #348]	; (80008c4 <VectorB0+0x164>)
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8000768:	b4c0      	push	{r6, r7}
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 800076a:	6f66      	ldr	r6, [r4, #116]	; 0x74
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 800076c:	b083      	sub	sp, #12
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
  uint32_t cr1 = u->CR1;
 800076e:	6837      	ldr	r7, [r6, #0]
  uint32_t isr;

  /* Reading and clearing status.*/
  isr = u->ISR;
 8000770:	69f5      	ldr	r5, [r6, #28]
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {

  OSAL_IRQ_PROLOGUE();
 8000772:	46f0      	mov	r8, lr
  uint32_t cr1 = u->CR1;
  uint32_t isr;

  /* Reading and clearing status.*/
  isr = u->ISR;
  u->ICR = isr;
 8000774:	6235      	str	r5, [r6, #32]

  /* Error condition detection.*/
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
 8000776:	072b      	lsls	r3, r5, #28
 8000778:	d147      	bne.n	800080a <VectorB0+0xaa>
    set_error(sdp, isr);

  /* Special case, LIN break detection.*/
  if (isr & USART_ISR_LBDF) {
 800077a:	05eb      	lsls	r3, r5, #23
 800077c:	d43e      	bmi.n	80007fc <VectorB0+0x9c>
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  if (isr & USART_ISR_RXNE) {
 800077e:	06ab      	lsls	r3, r5, #26
 8000780:	d418      	bmi.n	80007b4 <VectorB0+0x54>
    sdIncomingDataI(sdp, (uint8_t)u->RDR);
    osalSysUnlockFromISR();
  }

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
 8000782:	2380      	movs	r3, #128	; 0x80
 8000784:	423b      	tst	r3, r7
 8000786:	d001      	beq.n	800078c <VectorB0+0x2c>
 8000788:	422b      	tst	r3, r5
 800078a:	d153      	bne.n	8000834 <VectorB0+0xd4>
      u->TDR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (isr & USART_ISR_TC) {
 800078c:	066b      	lsls	r3, r5, #25
 800078e:	d509      	bpl.n	80007a4 <VectorB0+0x44>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000790:	b672      	cpsid	i
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8000792:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000794:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000796:	4293      	cmp	r3, r2
 8000798:	d100      	bne.n	800079c <VectorB0+0x3c>
 800079a:	e072      	b.n	8000882 <VectorB0+0x122>
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 800079c:	2340      	movs	r3, #64	; 0x40
 800079e:	439f      	bics	r7, r3
 80007a0:	6037      	str	r7, [r6, #0]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80007a2:	b662      	cpsie	i

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
 80007a4:	4640      	mov	r0, r8
 80007a6:	f7ff fd3b 	bl	8000220 <_port_irq_epilogue>
}
 80007aa:	b003      	add	sp, #12
 80007ac:	bc0c      	pop	{r2, r3}
 80007ae:	4690      	mov	r8, r2
 80007b0:	4699      	mov	r9, r3
 80007b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
  }

  /* Data available.*/
  if (isr & USART_ISR_RXNE) {
    osalSysLockFromISR();
    sdIncomingDataI(sdp, (uint8_t)u->RDR);
 80007b6:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	4699      	mov	r9, r3
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 80007bc:	6963      	ldr	r3, [r4, #20]
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d067      	beq.n	8000892 <VectorB0+0x132>
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 80007c2:	6a23      	ldr	r3, [r4, #32]
 80007c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d067      	beq.n	800089a <VectorB0+0x13a>

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 80007ca:	6962      	ldr	r2, [r4, #20]
 80007cc:	3201      	adds	r2, #1
 80007ce:	6162      	str	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
 80007d0:	1c5a      	adds	r2, r3, #1
 80007d2:	6222      	str	r2, [r4, #32]
 80007d4:	464a      	mov	r2, r9
 80007d6:	701a      	strb	r2, [r3, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 80007d8:	6a23      	ldr	r3, [r4, #32]
 80007da:	69e2      	ldr	r2, [r4, #28]
 80007dc:	4293      	cmp	r3, r2
 80007de:	d24d      	bcs.n	800087c <VectorB0+0x11c>
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 80007e0:	0023      	movs	r3, r4
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80007e2:	68e0      	ldr	r0, [r4, #12]
 80007e4:	330c      	adds	r3, #12
 80007e6:	4298      	cmp	r0, r3
 80007e8:	d006      	beq.n	80007f8 <VectorB0+0x98>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80007ea:	6802      	ldr	r2, [r0, #0]
 80007ec:	60e2      	str	r2, [r4, #12]
  tqp->p_next->p_prev = (thread_t *)tqp;
 80007ee:	6053      	str	r3, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80007f0:	2300      	movs	r3, #0
 80007f2:	6203      	str	r3, [r0, #32]
  (void) chSchReadyI(tp);
 80007f4:	f7ff fd6c 	bl	80002d0 <chSchReadyI>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80007f8:	b662      	cpsie	i
 80007fa:	e7c2      	b.n	8000782 <VectorB0+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007fc:	b672      	cpsid	i
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 80007fe:	2080      	movs	r0, #128	; 0x80
 8000800:	0080      	lsls	r0, r0, #2
 8000802:	f7ff fd75 	bl	80002f0 <chEvtBroadcastFlagsI.constprop.9>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000806:	b662      	cpsie	i
 8000808:	e7b9      	b.n	800077e <VectorB0+0x1e>
 * @param[in] isr       USART ISR register value
 */
static void set_error(SerialDriver *sdp, uint32_t isr) {
  eventflags_t sts = 0;

  if (isr & USART_ISR_ORE)
 800080a:	0728      	lsls	r0, r5, #28
    sts |= SD_OVERRUN_ERROR;
 800080c:	0fc0      	lsrs	r0, r0, #31
 800080e:	01c0      	lsls	r0, r0, #7
  if (isr & USART_ISR_PE)
 8000810:	07eb      	lsls	r3, r5, #31
 8000812:	d501      	bpl.n	8000818 <VectorB0+0xb8>
    sts |= SD_PARITY_ERROR;
 8000814:	2320      	movs	r3, #32
 8000816:	4318      	orrs	r0, r3
  if (isr & USART_ISR_FE)
 8000818:	07ab      	lsls	r3, r5, #30
 800081a:	d501      	bpl.n	8000820 <VectorB0+0xc0>
    sts |= SD_FRAMING_ERROR;
 800081c:	2340      	movs	r3, #64	; 0x40
 800081e:	4318      	orrs	r0, r3
  if (isr & USART_ISR_NE)
 8000820:	076b      	lsls	r3, r5, #29
 8000822:	d502      	bpl.n	800082a <VectorB0+0xca>
    sts |= SD_NOISE_ERROR;
 8000824:	2380      	movs	r3, #128	; 0x80
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	4318      	orrs	r0, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800082a:	b672      	cpsid	i
 800082c:	f7ff fd60 	bl	80002f0 <chEvtBroadcastFlagsI.constprop.9>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000830:	b662      	cpsie	i
 8000832:	e7a2      	b.n	800077a <VectorB0+0x1a>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8000836:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000838:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800083a:	429a      	cmp	r2, r3
 800083c:	d034      	beq.n	80008a8 <VectorB0+0x148>

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 800083e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000840:	3201      	adds	r2, #1
 8000842:	63a2      	str	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
 8000844:	1c5a      	adds	r2, r3, #1
 8000846:	64a2      	str	r2, [r4, #72]	; 0x48
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	4699      	mov	r9, r3
  if (oqp->q_rdptr >= oqp->q_top) {
 800084c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800084e:	429a      	cmp	r2, r3
 8000850:	d301      	bcc.n	8000856 <VectorB0+0xf6>
    oqp->q_rdptr = oqp->q_buffer;
 8000852:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000854:	64a3      	str	r3, [r4, #72]	; 0x48
 8000856:	0023      	movs	r3, r4
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8000858:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800085a:	3330      	adds	r3, #48	; 0x30
 800085c:	4298      	cmp	r0, r3
 800085e:	d006      	beq.n	800086e <VectorB0+0x10e>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000860:	6802      	ldr	r2, [r0, #0]
 8000862:	6322      	str	r2, [r4, #48]	; 0x30
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000864:	6053      	str	r3, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8000866:	2300      	movs	r3, #0
 8000868:	6203      	str	r3, [r0, #32]
  (void) chSchReadyI(tp);
 800086a:	f7ff fd31 	bl	80002d0 <chSchReadyI>
    if (b < Q_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    }
    else
      u->TDR = b;
 800086e:	464b      	mov	r3, r9
 8000870:	466a      	mov	r2, sp
 8000872:	80d3      	strh	r3, [r2, #6]
 8000874:	88d3      	ldrh	r3, [r2, #6]
 8000876:	8533      	strh	r3, [r6, #40]	; 0x28
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000878:	b662      	cpsie	i
 800087a:	e787      	b.n	800078c <VectorB0+0x2c>
  }

  iqp->q_counter++;
  *iqp->q_wrptr++ = b;
  if (iqp->q_wrptr >= iqp->q_top) {
    iqp->q_wrptr = iqp->q_buffer;
 800087c:	69a3      	ldr	r3, [r4, #24]
 800087e:	6223      	str	r3, [r4, #32]
 8000880:	e7ae      	b.n	80007e0 <VectorB0+0x80>
 8000882:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000884:	2b00      	cmp	r3, #0
 8000886:	d100      	bne.n	800088a <VectorB0+0x12a>
 8000888:	e788      	b.n	800079c <VectorB0+0x3c>
 800088a:	2010      	movs	r0, #16
 800088c:	f7ff fd30 	bl	80002f0 <chEvtBroadcastFlagsI.constprop.9>
 8000890:	e784      	b.n	800079c <VectorB0+0x3c>
 8000892:	2004      	movs	r0, #4
 8000894:	f7ff fd2c 	bl	80002f0 <chEvtBroadcastFlagsI.constprop.9>
 8000898:	e793      	b.n	80007c2 <VectorB0+0x62>
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 800089a:	6962      	ldr	r2, [r4, #20]
 800089c:	2a00      	cmp	r2, #0
 800089e:	d094      	beq.n	80007ca <VectorB0+0x6a>
 80008a0:	2080      	movs	r0, #128	; 0x80
 80008a2:	f7ff fd25 	bl	80002f0 <chEvtBroadcastFlagsI.constprop.9>
 80008a6:	e7a7      	b.n	80007f8 <VectorB0+0x98>
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 80008a8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80008aa:	2a00      	cmp	r2, #0
 80008ac:	d0c7      	beq.n	800083e <VectorB0+0xde>
 80008ae:	2008      	movs	r0, #8
 80008b0:	f7ff fd1e 	bl	80002f0 <chEvtBroadcastFlagsI.constprop.9>
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    if (b < Q_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 80008b4:	23c0      	movs	r3, #192	; 0xc0
 80008b6:	003a      	movs	r2, r7
 80008b8:	439a      	bics	r2, r3
 80008ba:	3b80      	subs	r3, #128	; 0x80
 80008bc:	4313      	orrs	r3, r2
 80008be:	6033      	str	r3, [r6, #0]
 80008c0:	e7da      	b.n	8000878 <VectorB0+0x118>
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	20000750 	.word	0x20000750
	...

080008d0 <Vector7C>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80008d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008d2:	4646      	mov	r6, r8
 80008d4:	464f      	mov	r7, r9
 80008d6:	b4c0      	push	{r6, r7}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 80008d8:	2680      	movs	r6, #128	; 0x80
 80008da:	05f6      	lsls	r6, r6, #23
 80008dc:	6933      	ldr	r3, [r6, #16]
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {

  OSAL_IRQ_PROLOGUE();
 80008de:	46f0      	mov	r8, lr

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 80008e0:	079b      	lsls	r3, r3, #30
 80008e2:	d406      	bmi.n	80008f2 <Vector7C+0x22>
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 80008e4:	4640      	mov	r0, r8
 80008e6:	f7ff fc9b 	bl	8000220 <_port_irq_epilogue>
}
 80008ea:	bc0c      	pop	{r2, r3}
 80008ec:	4690      	mov	r8, r2
 80008ee:	4699      	mov	r9, r3
 80008f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 80008f2:	2300      	movs	r3, #0
 80008f4:	6133      	str	r3, [r6, #16]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f6:	b672      	cpsid	i
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 80008f8:	4c19      	ldr	r4, [pc, #100]	; (8000960 <Vector7C+0x90>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80008fa:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80008fc:	69e3      	ldr	r3, [r4, #28]

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80008fe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000900:	689a      	ldr	r2, [r3, #8]
 8000902:	1a45      	subs	r5, r0, r1
 8000904:	4295      	cmp	r5, r2
 8000906:	d318      	bcc.n	800093a <Vector7C+0x6a>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000908:	0025      	movs	r5, r4
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 800090a:	2700      	movs	r7, #0
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 800090c:	46b1      	mov	r9, r6
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800090e:	351c      	adds	r5, #28
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8000910:	188a      	adds	r2, r1, r2
 8000912:	62a2      	str	r2, [r4, #40]	; 0x28

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000914:	681a      	ldr	r2, [r3, #0]
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 8000916:	68d9      	ldr	r1, [r3, #12]
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000918:	6055      	str	r5, [r2, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 800091a:	61e2      	str	r2, [r4, #28]
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 800091c:	60df      	str	r7, [r3, #12]

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 800091e:	42aa      	cmp	r2, r5
 8000920:	d018      	beq.n	8000954 <Vector7C+0x84>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000922:	b662      	cpsie	i
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 8000924:	6918      	ldr	r0, [r3, #16]
 8000926:	4788      	blx	r1
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 800092a:	464a      	mov	r2, r9
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 800092c:	69e3      	ldr	r3, [r4, #28]
 800092e:	6a50      	ldr	r0, [r2, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8000930:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000932:	689a      	ldr	r2, [r3, #8]
 8000934:	1a46      	subs	r6, r0, r1
 8000936:	42b2      	cmp	r2, r6
 8000938:	d9ea      	bls.n	8000910 <Vector7C+0x40>
    vtp = ch.vtlist.vt_next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 800093a:	341c      	adds	r4, #28
 800093c:	42a3      	cmp	r3, r4
 800093e:	d007      	beq.n	8000950 <Vector7C+0x80>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 8000940:	1852      	adds	r2, r2, r1
 8000942:	1a12      	subs	r2, r2, r0
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
 8000944:	2a01      	cmp	r2, #1
 8000946:	d908      	bls.n	800095a <Vector7C+0x8a>
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000948:	2380      	movs	r3, #128	; 0x80
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }
  port_timer_set_alarm(now + delta);
 800094a:	1812      	adds	r2, r2, r0
 800094c:	05db      	lsls	r3, r3, #23
 800094e:	635a      	str	r2, [r3, #52]	; 0x34
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000950:	b662      	cpsie	i
 8000952:	e7c7      	b.n	80008e4 <Vector7C+0x14>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8000954:	464a      	mov	r2, r9
 8000956:	60d7      	str	r7, [r2, #12]
 8000958:	e7e3      	b.n	8000922 <Vector7C+0x52>
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 800095a:	2202      	movs	r2, #2
 800095c:	e7f4      	b.n	8000948 <Vector7C+0x78>
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	200007d0 	.word	0x200007d0
	...

08000970 <main>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAHB(0xFFFFFFFF);
 8000970:	4bb3      	ldr	r3, [pc, #716]	; (8000c40 <main+0x2d0>)
 8000972:	2101      	movs	r1, #1
 8000974:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}

/*
 * Application entry point.
 */
int main(void) {
 8000976:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000978:	2200      	movs	r2, #0
 800097a:	4657      	mov	r7, sl
 800097c:	464e      	mov	r6, r9
 800097e:	4645      	mov	r5, r8
 8000980:	4249      	negs	r1, r1
 8000982:	b4e0      	push	{r5, r6, r7}
 8000984:	6299      	str	r1, [r3, #40]	; 0x28
 8000986:	629a      	str	r2, [r3, #40]	; 0x28
  rccResetAPB1(0xFFFFFFFF);
 8000988:	6918      	ldr	r0, [r3, #16]
 800098a:	6119      	str	r1, [r3, #16]
 800098c:	611a      	str	r2, [r3, #16]
  rccResetAPB2(~RCC_APB2RSTR_DBGMCURST);
 800098e:	68d9      	ldr	r1, [r3, #12]
 8000990:	48ac      	ldr	r0, [pc, #688]	; (8000c44 <main+0x2d4>)
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8000992:	2480      	movs	r4, #128	; 0x80
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAHB(0xFFFFFFFF);
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(~RCC_APB2RSTR_DBGMCURST);
 8000994:	4301      	orrs	r1, r0

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 8000996:	2080      	movs	r0, #128	; 0x80
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAHB(0xFFFFFFFF);
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(~RCC_APB2RSTR_DBGMCURST);
 8000998:	60d9      	str	r1, [r3, #12]
 800099a:	60da      	str	r2, [r3, #12]

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 800099c:	69d9      	ldr	r1, [r3, #28]
 800099e:	0540      	lsls	r0, r0, #21
 80009a0:	4301      	orrs	r1, r0
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 80009a2:	48a9      	ldr	r0, [pc, #676]	; (8000c48 <main+0x2d8>)
  rccResetAHB(0xFFFFFFFF);
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(~RCC_APB2RSTR_DBGMCURST);

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 80009a4:	61d9      	str	r1, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 80009a6:	6801      	ldr	r1, [r0, #0]
 80009a8:	0064      	lsls	r4, r4, #1
 80009aa:	4321      	orrs	r1, r4
 80009ac:	6001      	str	r1, [r0, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL){
 80009ae:	21c0      	movs	r1, #192	; 0xc0
 80009b0:	6a18      	ldr	r0, [r3, #32]
 80009b2:	0089      	lsls	r1, r1, #2
 80009b4:	4001      	ands	r1, r0
 80009b6:	2080      	movs	r0, #128	; 0x80
 80009b8:	0080      	lsls	r0, r0, #2
 80009ba:	4281      	cmp	r1, r0
 80009bc:	d003      	beq.n	80009c6 <main+0x56>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 80009be:	2180      	movs	r1, #128	; 0x80
 80009c0:	0249      	lsls	r1, r1, #9
 80009c2:	6219      	str	r1, [r3, #32]
    RCC->BDCR = 0;
 80009c4:	621a      	str	r2, [r3, #32]
#endif

#if STM32_RTCSEL != STM32_RTCSEL_NOCLOCK
  /* If the backup domain hasn't been initialized yet then proceed with
     initialization.*/
  if ((RCC->BDCR & RCC_BDCR_RTCEN) == 0) {
 80009c6:	2080      	movs	r0, #128	; 0x80
 80009c8:	4b9d      	ldr	r3, [pc, #628]	; (8000c40 <main+0x2d0>)
 80009ca:	0200      	lsls	r0, r0, #8
 80009cc:	6a1a      	ldr	r2, [r3, #32]
 80009ce:	4202      	tst	r2, r0
 80009d0:	d107      	bne.n	80009e2 <main+0x72>
    /* Selects clock source.*/
    RCC->BDCR |= STM32_RTCSEL;
 80009d2:	2280      	movs	r2, #128	; 0x80
 80009d4:	6a19      	ldr	r1, [r3, #32]
 80009d6:	0092      	lsls	r2, r2, #2
 80009d8:	4311      	orrs	r1, r2
 80009da:	6219      	str	r1, [r3, #32]

    /* RTC clock enabled.*/
    RCC->BDCR |= RCC_BDCR_RTCEN;
 80009dc:	6a1a      	ldr	r2, [r3, #32]
 80009de:	4302      	orrs	r2, r0
 80009e0:	621a      	str	r2, [r3, #32]
  RCC->IOPSMENR |= AHB_LPEN_MASK;
#elif defined(STM32L1XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
  RCC->AHBLPENR |= AHB_LPEN_MASK;
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
 80009e2:	219c      	movs	r1, #156	; 0x9c
 80009e4:	4a96      	ldr	r2, [pc, #600]	; (8000c40 <main+0x2d0>)
 80009e6:	03c9      	lsls	r1, r1, #15
 80009e8:	6953      	ldr	r3, [r2, #20]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80009ea:	2500      	movs	r5, #0
  RCC->IOPSMENR |= AHB_LPEN_MASK;
#elif defined(STM32L1XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
  RCC->AHBLPENR |= AHB_LPEN_MASK;
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
 80009ec:	430b      	orrs	r3, r1
 80009ee:	6153      	str	r3, [r2, #20]
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 80009f0:	2101      	movs	r1, #1
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80009f2:	2390      	movs	r3, #144	; 0x90
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 80009f4:	2604      	movs	r6, #4

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 80009f6:	4895      	ldr	r0, [pc, #596]	; (8000c4c <main+0x2dc>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80009f8:	05db      	lsls	r3, r3, #23
  gpiop->OSPEEDR = config->ospeedr;
 80009fa:	4249      	negs	r1, r1
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80009fc:	605d      	str	r5, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80009fe:	6099      	str	r1, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 8000a00:	60d8      	str	r0, [r3, #12]
  gpiop->ODR     = config->odr;
 8000a02:	4893      	ldr	r0, [pc, #588]	; (8000c50 <main+0x2e0>)

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8000a04:	4c93      	ldr	r4, [pc, #588]	; (8000c54 <main+0x2e4>)
  gpiop->ODR     = config->odr;
 8000a06:	6158      	str	r0, [r3, #20]
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8000a08:	4893      	ldr	r0, [pc, #588]	; (8000c58 <main+0x2e8>)

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8000a0a:	621d      	str	r5, [r3, #32]
  gpiop->AFRH    = config->afrh;
 8000a0c:	625d      	str	r5, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000a0e:	6018      	str	r0, [r3, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000a10:	4b92      	ldr	r3, [pc, #584]	; (8000c5c <main+0x2ec>)
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8000a12:	4893      	ldr	r0, [pc, #588]	; (8000c60 <main+0x2f0>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000a14:	605d      	str	r5, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000a16:	6099      	str	r1, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 8000a18:	60dc      	str	r4, [r3, #12]
  gpiop->ODR     = config->odr;
 8000a1a:	6158      	str	r0, [r3, #20]
  gpiop->AFRL    = config->afrl;
 8000a1c:	621d      	str	r5, [r3, #32]
  gpiop->AFRH    = config->afrh;
 8000a1e:	625d      	str	r5, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000a20:	601e      	str	r6, [r3, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000a22:	4b90      	ldr	r3, [pc, #576]	; (8000c64 <main+0x2f4>)
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
 8000a24:	27c7      	movs	r7, #199	; 0xc7
 8000a26:	605d      	str	r5, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000a28:	6099      	str	r1, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 8000a2a:	60dc      	str	r4, [r3, #12]
  gpiop->ODR     = config->odr;
 8000a2c:	6158      	str	r0, [r3, #20]
  gpiop->AFRL    = config->afrl;
 8000a2e:	621d      	str	r5, [r3, #32]
  gpiop->AFRH    = config->afrh;
 8000a30:	625d      	str	r5, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000a32:	601d      	str	r5, [r3, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000a34:	4b8c      	ldr	r3, [pc, #560]	; (8000c68 <main+0x2f8>)
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8000a36:	3e03      	subs	r6, #3
 8000a38:	605d      	str	r5, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000a3a:	6099      	str	r1, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 8000a3c:	60dc      	str	r4, [r3, #12]
  gpiop->ODR     = config->odr;
 8000a3e:	6158      	str	r0, [r3, #20]
  gpiop->AFRL    = config->afrl;
 8000a40:	621d      	str	r5, [r3, #32]
  gpiop->AFRH    = config->afrh;
 8000a42:	625d      	str	r5, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000a44:	601d      	str	r5, [r3, #0]
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 8000a46:	4b89      	ldr	r3, [pc, #548]	; (8000c6c <main+0x2fc>)
 8000a48:	4c89      	ldr	r4, [pc, #548]	; (8000c70 <main+0x300>)
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	c010      	stmia	r0!, {r4}
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8000a4e:	6058      	str	r0, [r3, #4]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000a50:	0018      	movs	r0, r3
 8000a52:	300c      	adds	r0, #12
 8000a54:	60d8      	str	r0, [r3, #12]
  tqp->p_prev = (thread_t *)tqp;
 8000a56:	6118      	str	r0, [r3, #16]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8000a58:	0018      	movs	r0, r3
 8000a5a:	3054      	adds	r0, #84	; 0x54
 8000a5c:	6198      	str	r0, [r3, #24]
  iqp->q_rdptr   = bp;
 8000a5e:	6258      	str	r0, [r3, #36]	; 0x24
  iqp->q_wrptr   = bp;
 8000a60:	6218      	str	r0, [r3, #32]
  iqp->q_top     = bp + size;
 8000a62:	0018      	movs	r0, r3
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000a64:	001c      	movs	r4, r3
 8000a66:	3064      	adds	r0, #100	; 0x64
 8000a68:	61d8      	str	r0, [r3, #28]
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 8000a6a:	63d8      	str	r0, [r3, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 8000a6c:	6498      	str	r0, [r3, #72]	; 0x48
  oqp->q_wrptr   = bp;
 8000a6e:	6458      	str	r0, [r3, #68]	; 0x44
  oqp->q_top     = bp + size;
 8000a70:	0018      	movs	r0, r3
 8000a72:	3430      	adds	r4, #48	; 0x30
 8000a74:	631c      	str	r4, [r3, #48]	; 0x30
  tqp->p_prev = (thread_t *)tqp;
 8000a76:	635c      	str	r4, [r3, #52]	; 0x34
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8000a78:	2410      	movs	r4, #16
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8000a7a:	3074      	adds	r0, #116	; 0x74
 8000a7c:	6418      	str	r0, [r3, #64]	; 0x40
  oqp->q_notify  = onfy;
 8000a7e:	487d      	ldr	r0, [pc, #500]	; (8000c74 <main+0x304>)
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8000a80:	615d      	str	r5, [r3, #20]
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8000a82:	64d8      	str	r0, [r3, #76]	; 0x4c
#endif
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 8000a84:	487c      	ldr	r0, [pc, #496]	; (8000c78 <main+0x308>)
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8000a86:	639c      	str	r4, [r3, #56]	; 0x38
 8000a88:	6758      	str	r0, [r3, #116]	; 0x74
  SD2.clock = STM32_USART2CLK;
 8000a8a:	487c      	ldr	r0, [pc, #496]	; (8000c7c <main+0x30c>)
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8000a8c:	721e      	strb	r6, [r3, #8]
 8000a8e:	6798      	str	r0, [r3, #120]	; 0x78
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8000a90:	629d      	str	r5, [r3, #40]	; 0x28
  iqp->q_link    = link;
 8000a92:	62db      	str	r3, [r3, #44]	; 0x2c
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 8000a94:	651b      	str	r3, [r3, #80]	; 0x50
 8000a96:	4b7a      	ldr	r3, [pc, #488]	; (8000c80 <main+0x310>)
 8000a98:	00bf      	lsls	r7, r7, #2
 8000a9a:	59d8      	ldr	r0, [r3, r7]
 8000a9c:	34ef      	adds	r4, #239	; 0xef
 8000a9e:	43a0      	bics	r0, r4
 8000aa0:	0004      	movs	r4, r0
 8000aa2:	20c0      	movs	r0, #192	; 0xc0
 8000aa4:	4320      	orrs	r0, r4
 8000aa6:	51d8      	str	r0, [r3, r7]
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000aa8:	2480      	movs	r4, #128	; 0x80
 8000aaa:	20c0      	movs	r0, #192	; 0xc0
 8000aac:	0564      	lsls	r4, r4, #21
 8000aae:	0040      	lsls	r0, r0, #1
 8000ab0:	501c      	str	r4, [r3, r0]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000ab2:	601c      	str	r4, [r3, #0]

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8000ab4:	69d4      	ldr	r4, [r2, #28]
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
 8000ab6:	2780      	movs	r7, #128	; 0x80
 8000ab8:	4334      	orrs	r4, r6
 8000aba:	61d4      	str	r4, [r2, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8000abc:	4c71      	ldr	r4, [pc, #452]	; (8000c84 <main+0x314>)
 8000abe:	063f      	lsls	r7, r7, #24
 8000ac0:	68a2      	ldr	r2, [r4, #8]
 8000ac2:	4332      	orrs	r2, r6
 8000ac4:	60a2      	str	r2, [r4, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8000ac6:	2280      	movs	r2, #128	; 0x80
 8000ac8:	4c6f      	ldr	r4, [pc, #444]	; (8000c88 <main+0x318>)
 8000aca:	05d2      	lsls	r2, r2, #23
 8000acc:	6294      	str	r4, [r2, #40]	; 0x28
 8000ace:	24c3      	movs	r4, #195	; 0xc3
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8000ad0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000ad2:	00a4      	lsls	r4, r4, #2
  STM32_ST_TIM->CCMR1  = 0;
 8000ad4:	6195      	str	r5, [r2, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8000ad6:	6355      	str	r5, [r2, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8000ad8:	60d5      	str	r5, [r2, #12]
  STM32_ST_TIM->CR2    = 0;
 8000ada:	6055      	str	r5, [r2, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8000adc:	6156      	str	r6, [r2, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8000ade:	6016      	str	r6, [r2, #0]
 8000ae0:	591a      	ldr	r2, [r3, r4]
 8000ae2:	0212      	lsls	r2, r2, #8
 8000ae4:	0a12      	lsrs	r2, r2, #8
 8000ae6:	433a      	orrs	r2, r7
 8000ae8:	511a      	str	r2, [r3, r4]
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000aea:	2280      	movs	r2, #128	; 0x80
 8000aec:	0212      	lsls	r2, r2, #8
 8000aee:	501a      	str	r2, [r3, r0]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000af0:	601a      	str	r2, [r3, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)(IRQn) < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af2:	4a66      	ldr	r2, [pc, #408]	; (8000c8c <main+0x31c>)
 8000af4:	4b66      	ldr	r3, [pc, #408]	; (8000c90 <main+0x320>)
 8000af6:	6a10      	ldr	r0, [r2, #32]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000af8:	4c66      	ldr	r4, [pc, #408]	; (8000c94 <main+0x324>)
 8000afa:	4003      	ands	r3, r0
 8000afc:	6213      	str	r3, [r2, #32]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8000afe:	0023      	movs	r3, r4
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8000b00:	2207      	movs	r2, #7
 8000b02:	331c      	adds	r3, #28
 8000b04:	61e3      	str	r3, [r4, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000b06:	6223      	str	r3, [r4, #32]
 8000b08:	4b63      	ldr	r3, [pc, #396]	; (8000c98 <main+0x328>)
  ch.vtlist.vt_delta = (systime_t)-1;
 8000b0a:	6261      	str	r1, [r4, #36]	; 0x24
 8000b0c:	3307      	adds	r3, #7
 8000b0e:	4963      	ldr	r1, [pc, #396]	; (8000c9c <main+0x32c>)
 8000b10:	4393      	bics	r3, r2
 8000b12:	600b      	str	r3, [r1, #0]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000b14:	4b62      	ldr	r3, [pc, #392]	; (8000ca0 <main+0x330>)
 8000b16:	6024      	str	r4, [r4, #0]
 8000b18:	4393      	bics	r3, r2
 8000b1a:	4a62      	ldr	r2, [pc, #392]	; (8000ca4 <main+0x334>)
  tqp->p_prev = (thread_t *)tqp;
 8000b1c:	6064      	str	r4, [r4, #4]
 8000b1e:	6013      	str	r3, [r2, #0]
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8000b20:	4b61      	ldr	r3, [pc, #388]	; (8000ca8 <main+0x338>)
 8000b22:	4a62      	ldr	r2, [pc, #392]	; (8000cac <main+0x33c>)
  default_heap.h_free.h.u.next = NULL;
 8000b24:	609d      	str	r5, [r3, #8]
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8000b26:	601a      	str	r2, [r3, #0]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000b28:	001a      	movs	r2, r3
 8000b2a:	3210      	adds	r2, #16
  default_heap.h_free.h.u.next = NULL;
  default_heap.h_free.h.size = 0;
 8000b2c:	60dd      	str	r5, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 8000b30:	60a5      	str	r5, [r4, #8]
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 8000b32:	62a5      	str	r5, [r4, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 8000b34:	615a      	str	r2, [r3, #20]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8000b36:	619d      	str	r5, [r3, #24]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8000b38:	234d      	movs	r3, #77	; 0x4d
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8000b3a:	0022      	movs	r2, r4
 8000b3c:	54e5      	strb	r5, [r4, r3]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8000b3e:	3301      	adds	r3, #1
 8000b40:	54e6      	strb	r6, [r4, r3]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000b42:	0023      	movs	r3, r4
 8000b44:	3254      	adds	r2, #84	; 0x54
 8000b46:	3330      	adds	r3, #48	; 0x30
 8000b48:	6562      	str	r2, [r4, #84]	; 0x54
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000b4a:	0022      	movs	r2, r4
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8000b4c:	2740      	movs	r7, #64	; 0x40
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000b4e:	6123      	str	r3, [r4, #16]
 8000b50:	6163      	str	r3, [r4, #20]
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8000b52:	61a3      	str	r3, [r4, #24]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8000b54:	234c      	movs	r3, #76	; 0x4c
 8000b56:	3258      	adds	r2, #88	; 0x58
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8000b58:	63a7      	str	r7, [r4, #56]	; 0x38
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8000b5a:	66e7      	str	r7, [r4, #108]	; 0x6c
  tp->p_mtxlist = NULL;
 8000b5c:	66a5      	str	r5, [r4, #104]	; 0x68
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8000b5e:	6665      	str	r5, [r4, #100]	; 0x64
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8000b60:	64a5      	str	r5, [r4, #72]	; 0x48
  REG_INSERT(tp);
 8000b62:	6424      	str	r4, [r4, #64]	; 0x40
 8000b64:	6464      	str	r4, [r4, #68]	; 0x44
 8000b66:	65a2      	str	r2, [r4, #88]	; 0x58
  tqp->p_prev = (thread_t *)tqp;
 8000b68:	65e2      	str	r2, [r4, #92]	; 0x5c
 8000b6a:	54e6      	strb	r6, [r4, r3]
 8000b6c:	b662      	cpsie	i
 8000b6e:	4a50      	ldr	r2, [pc, #320]	; (8000cb0 <main+0x340>)
 8000b70:	69a3      	ldr	r3, [r4, #24]
 8000b72:	619a      	str	r2, [r3, #24]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b74:	b672      	cpsid	i

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000b76:	0022      	movs	r2, r4
 8000b78:	2384      	movs	r3, #132	; 0x84
 8000b7a:	322d      	adds	r2, #45	; 0x2d
 8000b7c:	32ff      	adds	r2, #255	; 0xff
 8000b7e:	50e2      	str	r2, [r4, r3]
 8000b80:	4a4c      	ldr	r2, [pc, #304]	; (8000cb4 <main+0x344>)
 8000b82:	33b8      	adds	r3, #184	; 0xb8
 8000b84:	50e2      	str	r2, [r4, r3]
 8000b86:	3304      	adds	r3, #4
 8000b88:	50e5      	str	r5, [r4, r3]
 8000b8a:	4b4b      	ldr	r3, [pc, #300]	; (8000cb8 <main+0x348>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000b8c:	0020      	movs	r0, r4

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000b8e:	4699      	mov	r9, r3
 8000b90:	23a6      	movs	r3, #166	; 0xa6
 8000b92:	464a      	mov	r2, r9
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	50e2      	str	r2, [r4, r3]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8000b98:	3bcc      	subs	r3, #204	; 0xcc
 8000b9a:	50e6      	str	r6, [r4, r3]
  tp->p_state = CH_STATE_WTSTART;
 8000b9c:	3b7e      	subs	r3, #126	; 0x7e
 8000b9e:	4698      	mov	r8, r3
 8000ba0:	4642      	mov	r2, r8
 8000ba2:	3392      	adds	r3, #146	; 0x92
 8000ba4:	54e2      	strb	r2, [r4, r3]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000ba6:	228c      	movs	r2, #140	; 0x8c
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8000ba8:	3301      	adds	r3, #1
 8000baa:	54e5      	strb	r5, [r4, r3]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8000bac:	331f      	adds	r3, #31
 8000bae:	50e6      	str	r6, [r4, r3]
  tp->p_mtxlist = NULL;
 8000bb0:	3b04      	subs	r3, #4
 8000bb2:	50e5      	str	r5, [r4, r3]
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8000bb4:	3b04      	subs	r3, #4
 8000bb6:	50e5      	str	r5, [r4, r3]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8000bb8:	3b16      	subs	r3, #22
 8000bba:	54e6      	strb	r6, [r4, r3]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8000bbc:	3b06      	subs	r3, #6
 8000bbe:	50e5      	str	r5, [r4, r3]
 8000bc0:	469a      	mov	sl, r3
  REG_INSERT(tp);
 8000bc2:	3b08      	subs	r3, #8
 8000bc4:	50e4      	str	r4, [r4, r3]
 8000bc6:	6963      	ldr	r3, [r4, #20]
 8000bc8:	3078      	adds	r0, #120	; 0x78
 8000bca:	50a3      	str	r3, [r4, r2]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8000bcc:	0022      	movs	r2, r4
 8000bce:	6118      	str	r0, [r3, #16]
 8000bd0:	239c      	movs	r3, #156	; 0x9c
 8000bd2:	329c      	adds	r2, #156	; 0x9c
 8000bd4:	50e2      	str	r2, [r4, r3]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000bd6:	0023      	movs	r3, r4
 8000bd8:	22a0      	movs	r2, #160	; 0xa0
 8000bda:	33a0      	adds	r3, #160	; 0xa0
 8000bdc:	50a3      	str	r3, [r4, r2]
  tqp->p_prev = (thread_t *)tqp;
 8000bde:	3204      	adds	r2, #4
 8000be0:	50a3      	str	r3, [r4, r2]
 8000be2:	6160      	str	r0, [r4, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 8000be4:	f7ff fbc4 	bl	8000370 <chSchWakeupS.constprop.16>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000be8:	b662      	cpsie	i
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 8000bea:	4652      	mov	r2, sl
 8000bec:	4b33      	ldr	r3, [pc, #204]	; (8000cbc <main+0x34c>)
 8000bee:	50a3      	str	r3, [r4, r2]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf0:	b672      	cpsid	i

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000bf2:	4833      	ldr	r0, [pc, #204]	; (8000cc0 <main+0x350>)
 8000bf4:	4a33      	ldr	r2, [pc, #204]	; (8000cc4 <main+0x354>)
 8000bf6:	0003      	movs	r3, r0
 8000bf8:	3325      	adds	r3, #37	; 0x25
 8000bfa:	33ff      	adds	r3, #255	; 0xff
 8000bfc:	60c3      	str	r3, [r0, #12]
 8000bfe:	239a      	movs	r3, #154	; 0x9a
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	50c2      	str	r2, [r0, r3]
 8000c04:	464a      	mov	r2, r9
 8000c06:	3304      	adds	r3, #4
 8000c08:	50c5      	str	r5, [r0, r3]
 8000c0a:	330c      	adds	r3, #12
 8000c0c:	50c2      	str	r2, [r0, r3]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8000c0e:	4643      	mov	r3, r8
 8000c10:	7703      	strb	r3, [r0, #28]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000c12:	6963      	ldr	r3, [r4, #20]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8000c14:	7745      	strb	r5, [r0, #29]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000c16:	6143      	str	r3, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8000c18:	63c7      	str	r7, [r0, #60]	; 0x3c
  tp->p_mtxlist = NULL;
 8000c1a:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8000c1c:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8000c1e:	7786      	strb	r6, [r0, #30]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8000c20:	6185      	str	r5, [r0, #24]
  REG_INSERT(tp);
 8000c22:	6104      	str	r4, [r0, #16]
 8000c24:	6118      	str	r0, [r3, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8000c26:	0003      	movs	r3, r0
 8000c28:	3324      	adds	r3, #36	; 0x24
 8000c2a:	6243      	str	r3, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000c2c:	0003      	movs	r3, r0
 8000c2e:	3328      	adds	r3, #40	; 0x28
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8000c30:	6087      	str	r7, [r0, #8]
 8000c32:	6283      	str	r3, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 8000c34:	62c3      	str	r3, [r0, #44]	; 0x2c
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000c36:	6160      	str	r0, [r4, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 8000c38:	f7ff fb9a 	bl	8000370 <chSchWakeupS.constprop.16>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000c3c:	b662      	cpsie	i
 8000c3e:	e7fe      	b.n	8000c3e <main+0x2ce>
 8000c40:	40021000 	.word	0x40021000
 8000c44:	ffbfffff 	.word	0xffbfffff
 8000c48:	40007000 	.word	0x40007000
 8000c4c:	65555555 	.word	0x65555555
 8000c50:	0000fffc 	.word	0x0000fffc
 8000c54:	55555555 	.word	0x55555555
 8000c58:	2800a915 	.word	0x2800a915
 8000c5c:	48000400 	.word	0x48000400
 8000c60:	0000ffff 	.word	0x0000ffff
 8000c64:	48000800 	.word	0x48000800
 8000c68:	48001400 	.word	0x48001400
 8000c6c:	20000750 	.word	0x20000750
 8000c70:	08000f80 	.word	0x08000f80
 8000c74:	08000211 	.word	0x08000211
 8000c78:	40004400 	.word	0x40004400
 8000c7c:	02dc6c00 	.word	0x02dc6c00
 8000c80:	e000e100 	.word	0xe000e100
 8000c84:	40015800 	.word	0x40015800
 8000c88:	000012bf 	.word	0x000012bf
 8000c8c:	e000ed00 	.word	0xe000ed00
 8000c90:	ff00ffff 	.word	0xff00ffff
 8000c94:	200007d0 	.word	0x200007d0
 8000c98:	20000948 	.word	0x20000948
 8000c9c:	20000920 	.word	0x20000920
 8000ca0:	20001800 	.word	0x20001800
 8000ca4:	20000600 	.word	0x20000600
 8000ca8:	20000928 	.word	0x20000928
 8000cac:	080001e1 	.word	0x080001e1
 8000cb0:	08000ed0 	.word	0x08000ed0
 8000cb4:	080001d1 	.word	0x080001d1
 8000cb8:	080001b1 	.word	0x080001b1
 8000cbc:	08000ef8 	.word	0x08000ef8
 8000cc0:	20000608 	.word	0x20000608
 8000cc4:	080004f1 	.word	0x080004f1
	...

08000cd0 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8000cd0:	2301      	movs	r3, #1
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8000cd2:	2002      	movs	r0, #2
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8000cd4:	492d      	ldr	r1, [pc, #180]	; (8000d8c <__early_init+0xbc>)
 8000cd6:	680a      	ldr	r2, [r1, #0]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8000cdc:	680a      	ldr	r2, [r1, #0]
 8000cde:	4b2b      	ldr	r3, [pc, #172]	; (8000d8c <__early_init+0xbc>)
 8000ce0:	4210      	tst	r0, r2
 8000ce2:	d0fb      	beq.n	8000cdc <__early_init+0xc>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8000ce4:	2103      	movs	r1, #3
 8000ce6:	685a      	ldr	r2, [r3, #4]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8000ce8:	200c      	movs	r0, #12
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8000cea:	438a      	bics	r2, r1
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8000cec:	0019      	movs	r1, r3
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8000cee:	605a      	str	r2, [r3, #4]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	605a      	str	r2, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8000cf4:	684b      	ldr	r3, [r1, #4]
 8000cf6:	4a25      	ldr	r2, [pc, #148]	; (8000d8c <__early_init+0xbc>)
 8000cf8:	4003      	ands	r3, r0
 8000cfa:	d1fb      	bne.n	8000cf4 <__early_init+0x24>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8000cfc:	20f9      	movs	r0, #249	; 0xf9
 8000cfe:	6811      	ldr	r1, [r2, #0]
 8000d00:	4001      	ands	r1, r0
 8000d02:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8000d04:	6053      	str	r3, [r2, #4]
    ;                                       /* Waits until HSE is stable.   */
#endif

#if STM32_HSI14_ENABLED
  /* HSI14 activation.*/
  RCC->CR2 |= RCC_CR2_HSI14ON;
 8000d06:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000d08:	3301      	adds	r3, #1
 8000d0a:	430b      	orrs	r3, r1
 8000d0c:	6353      	str	r3, [r2, #52]	; 0x34
  while (!(RCC->CR2 & RCC_CR2_HSI14RDY))
 8000d0e:	38f7      	subs	r0, #247	; 0xf7
 8000d10:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000d12:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <__early_init+0xbc>)
 8000d14:	4208      	tst	r0, r1
 8000d16:	d0fb      	beq.n	8000d10 <__early_init+0x40>
    ;                                       /* Waits until HSI14 is stable. */
#endif

#if STM32_HSI48_ENABLED
  /* HSI48 activation.*/
  RCC->CR2 |= RCC_CR2_HSI48ON;
 8000d18:	2180      	movs	r1, #128	; 0x80
 8000d1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d1c:	0249      	lsls	r1, r1, #9
 8000d1e:	430a      	orrs	r2, r1
  while (!(RCC->CR2 & RCC_CR2_HSI48RDY))
 8000d20:	2080      	movs	r0, #128	; 0x80
    ;                                       /* Waits until HSI14 is stable. */
#endif

#if STM32_HSI48_ENABLED
  /* HSI48 activation.*/
  RCC->CR2 |= RCC_CR2_HSI48ON;
 8000d22:	635a      	str	r2, [r3, #52]	; 0x34
  while (!(RCC->CR2 & RCC_CR2_HSI48RDY))
 8000d24:	001a      	movs	r2, r3
 8000d26:	0280      	lsls	r0, r0, #10
 8000d28:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000d2a:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <__early_init+0xbc>)
 8000d2c:	4201      	tst	r1, r0
 8000d2e:	d0fb      	beq.n	8000d28 <__early_init+0x58>
    ;                                       /* Waits until HSI48 is stable. */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8000d30:	2201      	movs	r2, #1
 8000d32:	6a59      	ldr	r1, [r3, #36]	; 0x24
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8000d34:	2002      	movs	r0, #2
    ;                                       /* Waits until HSI48 is stable. */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8000d36:	430a      	orrs	r2, r1
 8000d38:	625a      	str	r2, [r3, #36]	; 0x24
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8000d3a:	001a      	movs	r2, r3
 8000d3c:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000d3e:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <__early_init+0xbc>)
 8000d40:	4208      	tst	r0, r1
 8000d42:	d0fb      	beq.n	8000d3c <__early_init+0x6c>
    ;                                       /* Waits until LSI is stable.   */
#endif

  /* Clock settings.*/
  RCC->CFGR  = STM32_PLLNODIV | STM32_MCOPRE | STM32_MCOSEL | STM32_PLLMUL |
 8000d44:	22a0      	movs	r2, #160	; 0xa0
 8000d46:	0392      	lsls	r2, r2, #14
 8000d48:	605a      	str	r2, [r3, #4]
               STM32_PLLSRC   | STM32_PPRE   | STM32_HPRE;
  RCC->CFGR2 = STM32_PREDIV;
 8000d4a:	2200      	movs	r2, #0
  RCC->CFGR3 = STM32_USBSW  | STM32_CECSW  | STM32_I2C1SW | STM32_USART1SW;
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CR   |= RCC_CR_PLLON;
 8000d4c:	2180      	movs	r1, #128	; 0x80
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8000d4e:	2080      	movs	r0, #128	; 0x80
#endif

  /* Clock settings.*/
  RCC->CFGR  = STM32_PLLNODIV | STM32_MCOPRE | STM32_MCOSEL | STM32_PLLMUL |
               STM32_PLLSRC   | STM32_PPRE   | STM32_HPRE;
  RCC->CFGR2 = STM32_PREDIV;
 8000d50:	62da      	str	r2, [r3, #44]	; 0x2c
#if STM32_CECSW == STM32_CECSW_OFF
  RCC->CFGR3 = STM32_USBSW  | STM32_I2C1SW | STM32_USART1SW;
#else
  RCC->CFGR3 = STM32_USBSW  | STM32_CECSW  | STM32_I2C1SW | STM32_USART1SW;
 8000d52:	631a      	str	r2, [r3, #48]	; 0x30
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CR   |= RCC_CR_PLLON;
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	0449      	lsls	r1, r1, #17
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8000d5c:	0480      	lsls	r0, r0, #18
 8000d5e:	6819      	ldr	r1, [r3, #0]
 8000d60:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <__early_init+0xbc>)
 8000d62:	4201      	tst	r1, r0
 8000d64:	d0fb      	beq.n	8000d5e <__early_init+0x8e>
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8000d66:	2111      	movs	r1, #17
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <__early_init+0xc0>)

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8000d6a:	200c      	movs	r0, #12
  while (!(RCC->CR & RCC_CR_PLLRDY))
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8000d6c:	6019      	str	r1, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	6851      	ldr	r1, [r2, #4]
 8000d72:	430b      	orrs	r3, r1
 8000d74:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8000d76:	6853      	ldr	r3, [r2, #4]
 8000d78:	4904      	ldr	r1, [pc, #16]	; (8000d8c <__early_init+0xbc>)
 8000d7a:	4003      	ands	r3, r0
 8000d7c:	2b08      	cmp	r3, #8
 8000d7e:	d1fa      	bne.n	8000d76 <__early_init+0xa6>
    ;                                       /* Waits selection complete.    */
#endif

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8000d80:	698a      	ldr	r2, [r1, #24]
 8000d82:	3b07      	subs	r3, #7
 8000d84:	4313      	orrs	r3, r2
 8000d86:	618b      	str	r3, [r1, #24]
 *          and before any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
}
 8000d88:	4770      	bx	lr
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	40022000 	.word	0x40022000
	...

08000da0 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8000da0:	b570      	push	{r4, r5, r6, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da2:	b672      	cpsid	i
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;
 8000da4:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <chThdExit+0x3c>)
 8000da6:	699c      	ldr	r4, [r3, #24]
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8000da8:	0025      	movs	r5, r4
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;

  tp->p_u.exitcode = msg;
 8000daa:	6220      	str	r0, [r4, #32]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8000dac:	6a60      	ldr	r0, [r4, #36]	; 0x24
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8000dae:	3524      	adds	r5, #36	; 0x24
 8000db0:	4285      	cmp	r5, r0
 8000db2:	d006      	beq.n	8000dc2 <chThdExit+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 8000db4:	6803      	ldr	r3, [r0, #0]
 8000db6:	6263      	str	r3, [r4, #36]	; 0x24
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 8000db8:	f7ff fa8a 	bl	80002d0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8000dbc:	6a60      	ldr	r0, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8000dbe:	42a8      	cmp	r0, r5
 8000dc0:	d1f8      	bne.n	8000db4 <chThdExit+0x14>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8000dc2:	7f63      	ldrb	r3, [r4, #29]
 8000dc4:	079b      	lsls	r3, r3, #30
 8000dc6:	d104      	bne.n	8000dd2 <chThdExit+0x32>
    REG_REMOVE(tp);
 8000dc8:	6922      	ldr	r2, [r4, #16]
 8000dca:	6963      	ldr	r3, [r4, #20]
 8000dcc:	611a      	str	r2, [r3, #16]
 8000dce:	6922      	ldr	r2, [r4, #16]
 8000dd0:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8000dd2:	200f      	movs	r0, #15
 8000dd4:	f7ff faf4 	bl	80003c0 <chSchGoSleepS>
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
  /* The thread never returns here.*/
}
 8000dd8:	bd70      	pop	{r4, r5, r6, pc}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	200007d0 	.word	0x200007d0

08000de0 <chSchDoReschedule>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8000de0:	4a0c      	ldr	r2, [pc, #48]	; (8000e14 <chSchDoReschedule+0x34>)
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 8000de2:	b510      	push	{r4, lr}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000de4:	6810      	ldr	r0, [r2, #0]
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8000de6:	6991      	ldr	r1, [r2, #24]

  tqp->p_next = tp->p_next;
 8000de8:	6803      	ldr	r3, [r0, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000dea:	605a      	str	r2, [r3, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000dec:	6013      	str	r3, [r2, #0]
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000dee:	6190      	str	r0, [r2, #24]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000df0:	2201      	movs	r2, #1
 8000df2:	7702      	strb	r2, [r0, #28]

  otp->p_state = CH_STATE_READY;
 8000df4:	2200      	movs	r2, #0
 8000df6:	770a      	strb	r2, [r1, #28]
 8000df8:	688a      	ldr	r2, [r1, #8]
 8000dfa:	e000      	b.n	8000dfe <chSchDoReschedule+0x1e>
 8000dfc:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 8000dfe:	689c      	ldr	r4, [r3, #8]
 8000e00:	4294      	cmp	r4, r2
 8000e02:	d8fb      	bhi.n	8000dfc <chSchDoReschedule+0x1c>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 8000e04:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 8000e06:	600b      	str	r3, [r1, #0]
  otp->p_prev = cp->p_prev;
 8000e08:	604a      	str	r2, [r1, #4]
  otp->p_prev->p_next = otp;
 8000e0a:	6011      	str	r1, [r2, #0]
  cp->p_prev = otp;
 8000e0c:	6059      	str	r1, [r3, #4]

  chSysSwitch(currp, otp);
 8000e0e:	f7ff f9bf 	bl	8000190 <_port_switch>
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */
}
 8000e12:	bd10      	pop	{r4, pc}
 8000e14:	200007d0 	.word	0x200007d0
	...

08000e20 <__init_ram_areas>:
      *p = 0;
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8000e20:	2280      	movs	r2, #128	; 0x80
 8000e22:	4694      	mov	ip, r2
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8000e24:	b5f0      	push	{r4, r5, r6, r7, lr}
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8000e26:	2600      	movs	r6, #0
/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 8000e28:	4f10      	ldr	r7, [pc, #64]	; (8000e6c <__init_ram_areas+0x4c>)
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8000e2a:	4d11      	ldr	r5, [pc, #68]	; (8000e70 <__init_ram_areas+0x50>)
 8000e2c:	4c11      	ldr	r4, [pc, #68]	; (8000e74 <__init_ram_areas+0x54>)
 8000e2e:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <__init_ram_areas+0x58>)
 8000e30:	4912      	ldr	r1, [pc, #72]	; (8000e7c <__init_ram_areas+0x5c>)
      *p = 0;
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8000e32:	44bc      	add	ip, r7
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8000e34:	429c      	cmp	r4, r3
 8000e36:	d90d      	bls.n	8000e54 <__init_ram_areas+0x34>
 8000e38:	001a      	movs	r2, r3
      *p = *tp;
 8000e3a:	c901      	ldmia	r1!, {r0}
 8000e3c:	c201      	stmia	r2!, {r0}
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8000e3e:	4294      	cmp	r4, r2
 8000e40:	d8fb      	bhi.n	8000e3a <__init_ram_areas+0x1a>
 8000e42:	43da      	mvns	r2, r3
 8000e44:	1914      	adds	r4, r2, r4
 8000e46:	08a4      	lsrs	r4, r4, #2
 8000e48:	3401      	adds	r4, #1
 8000e4a:	00a4      	lsls	r4, r4, #2
 8000e4c:	191b      	adds	r3, r3, r4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8000e4e:	429d      	cmp	r5, r3
 8000e50:	d902      	bls.n	8000e58 <__init_ram_areas+0x38>
      *p = 0;
 8000e52:	c340      	stmia	r3!, {r6}
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8000e54:	429d      	cmp	r5, r3
 8000e56:	d8fc      	bhi.n	8000e52 <__init_ram_areas+0x32>
      *p = 0;
      p++;
    }
    rap++;
 8000e58:	3710      	adds	r7, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8000e5a:	4567      	cmp	r7, ip
 8000e5c:	d004      	beq.n	8000e68 <__init_ram_areas+0x48>
 8000e5e:	68bc      	ldr	r4, [r7, #8]
 8000e60:	68fd      	ldr	r5, [r7, #12]
 8000e62:	6839      	ldr	r1, [r7, #0]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	e7e5      	b.n	8000e34 <__init_ram_areas+0x14>
#endif
}
 8000e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	08000f00 	.word	0x08000f00
 8000e70:	20000948 	.word	0x20000948
 8000e74:	20000948 	.word	0x20000948
 8000e78:	20000948 	.word	0x20000948
 8000e7c:	08000fa0 	.word	0x08000fa0

08000e80 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8000e80:	e7fe      	b.n	8000e80 <__default_exit>
 8000e82:	46c0      	nop			; (mov r8, r8)
	...

08000e90 <__late_init>:
 8000e90:	4770      	bx	lr
 8000e92:	46c0      	nop			; (mov r8, r8)
	...

08000ea0 <__core_init>:

#if __CORTEX_M == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 8000ea0:	4770      	bx	lr
 8000ea2:	46c0      	nop			; (mov r8, r8)
	...
 8000eb0:	080002b2 	.word	0x080002b2
 8000eb4:	08000292 	.word	0x08000292
 8000eb8:	08000292 	.word	0x08000292
 8000ebc:	080002b6 	.word	0x080002b6
 8000ec0:	08000288 	.word	0x08000288
 8000ec4:	08000280 	.word	0x08000280
 8000ec8:	08000292 	.word	0x08000292
 8000ecc:	08000288 	.word	0x08000288

08000ed0 <ch_debug>:
 8000ed0:	6e69616d 18441600 08440404 1814100c     main..D...D.....
 8000ee0:	1e1d1c00 00000000 00000000 00000000     ................
 8000ef0:	6e696c62 0072656b 656c6469 00000000     blinker.idle....

08000f00 <ram_areas>:
 8000f00:	08000fa0 20000948 20000948 20000948     ....H.. H.. H.. 
 8000f10:	08000fa0 00000000 00000000 00000000     ................
 8000f20:	08000fa0 00000000 00000000 00000000     ................
 8000f30:	08000fa0 00000000 00000000 00000000     ................
 8000f40:	08000fa0 00000000 00000000 00000000     ................
 8000f50:	08000fa0 00000000 00000000 00000000     ................
 8000f60:	08000fa0 00000000 00000000 00000000     ................
 8000f70:	08000fa0 00000000 00000000 00000000     ................

08000f80 <vmt>:
 8000f80:	080005f1 080006f1 08000661 08000751     ........a...Q...
 8000f90:	08000651 08000741 080005e1 080006e1     Q...A...........
